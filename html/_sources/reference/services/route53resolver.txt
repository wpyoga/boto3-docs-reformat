

***************
Route53Resolver
***************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: Route53Resolver.Client

  A low-level client representing Amazon Route 53 Resolver (Route53Resolver)
  

  When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.

   

  You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:

   

   **Forward DNS queries from resolvers on your network to Route 53 Resolver**  

   

  DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for AWS resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see `How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc>`__ in the *Amazon Route 53 Developer Guide* .

   

   **Conditionally forward queries from a VPC to resolvers on your network**  

   

  You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see `How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network>`__ in the *Amazon Route 53 Developer Guide* .

   

  Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.

  ::

    
    import boto3
    
    client = boto3.client('route53resolver')

  
  These are the available methods:
  
  *   :py:meth:`~Route53Resolver.Client.associate_firewall_rule_group`

  
  *   :py:meth:`~Route53Resolver.Client.associate_resolver_endpoint_ip_address`

  
  *   :py:meth:`~Route53Resolver.Client.associate_resolver_query_log_config`

  
  *   :py:meth:`~Route53Resolver.Client.associate_resolver_rule`

  
  *   :py:meth:`~Route53Resolver.Client.can_paginate`

  
  *   :py:meth:`~Route53Resolver.Client.create_firewall_domain_list`

  
  *   :py:meth:`~Route53Resolver.Client.create_firewall_rule`

  
  *   :py:meth:`~Route53Resolver.Client.create_firewall_rule_group`

  
  *   :py:meth:`~Route53Resolver.Client.create_resolver_endpoint`

  
  *   :py:meth:`~Route53Resolver.Client.create_resolver_query_log_config`

  
  *   :py:meth:`~Route53Resolver.Client.create_resolver_rule`

  
  *   :py:meth:`~Route53Resolver.Client.delete_firewall_domain_list`

  
  *   :py:meth:`~Route53Resolver.Client.delete_firewall_rule`

  
  *   :py:meth:`~Route53Resolver.Client.delete_firewall_rule_group`

  
  *   :py:meth:`~Route53Resolver.Client.delete_resolver_endpoint`

  
  *   :py:meth:`~Route53Resolver.Client.delete_resolver_query_log_config`

  
  *   :py:meth:`~Route53Resolver.Client.delete_resolver_rule`

  
  *   :py:meth:`~Route53Resolver.Client.disassociate_firewall_rule_group`

  
  *   :py:meth:`~Route53Resolver.Client.disassociate_resolver_endpoint_ip_address`

  
  *   :py:meth:`~Route53Resolver.Client.disassociate_resolver_query_log_config`

  
  *   :py:meth:`~Route53Resolver.Client.disassociate_resolver_rule`

  
  *   :py:meth:`~Route53Resolver.Client.generate_presigned_url`

  
  *   :py:meth:`~Route53Resolver.Client.get_firewall_config`

  
  *   :py:meth:`~Route53Resolver.Client.get_firewall_domain_list`

  
  *   :py:meth:`~Route53Resolver.Client.get_firewall_rule_group`

  
  *   :py:meth:`~Route53Resolver.Client.get_firewall_rule_group_association`

  
  *   :py:meth:`~Route53Resolver.Client.get_firewall_rule_group_policy`

  
  *   :py:meth:`~Route53Resolver.Client.get_paginator`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_dnssec_config`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_endpoint`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_query_log_config`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_query_log_config_association`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_query_log_config_policy`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_rule`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_rule_association`

  
  *   :py:meth:`~Route53Resolver.Client.get_resolver_rule_policy`

  
  *   :py:meth:`~Route53Resolver.Client.get_waiter`

  
  *   :py:meth:`~Route53Resolver.Client.import_firewall_domains`

  
  *   :py:meth:`~Route53Resolver.Client.list_firewall_configs`

  
  *   :py:meth:`~Route53Resolver.Client.list_firewall_domain_lists`

  
  *   :py:meth:`~Route53Resolver.Client.list_firewall_domains`

  
  *   :py:meth:`~Route53Resolver.Client.list_firewall_rule_group_associations`

  
  *   :py:meth:`~Route53Resolver.Client.list_firewall_rule_groups`

  
  *   :py:meth:`~Route53Resolver.Client.list_firewall_rules`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_dnssec_configs`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_endpoint_ip_addresses`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_endpoints`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_query_log_config_associations`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_query_log_configs`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_rule_associations`

  
  *   :py:meth:`~Route53Resolver.Client.list_resolver_rules`

  
  *   :py:meth:`~Route53Resolver.Client.list_tags_for_resource`

  
  *   :py:meth:`~Route53Resolver.Client.put_firewall_rule_group_policy`

  
  *   :py:meth:`~Route53Resolver.Client.put_resolver_query_log_config_policy`

  
  *   :py:meth:`~Route53Resolver.Client.put_resolver_rule_policy`

  
  *   :py:meth:`~Route53Resolver.Client.tag_resource`

  
  *   :py:meth:`~Route53Resolver.Client.untag_resource`

  
  *   :py:meth:`~Route53Resolver.Client.update_firewall_config`

  
  *   :py:meth:`~Route53Resolver.Client.update_firewall_domains`

  
  *   :py:meth:`~Route53Resolver.Client.update_firewall_rule`

  
  *   :py:meth:`~Route53Resolver.Client.update_firewall_rule_group_association`

  
  *   :py:meth:`~Route53Resolver.Client.update_resolver_dnssec_config`

  
  *   :py:meth:`~Route53Resolver.Client.update_resolver_endpoint`

  
  *   :py:meth:`~Route53Resolver.Client.update_resolver_rule`

  

  .. py:method:: associate_firewall_rule_group(**kwargs)

    

    Associates a  FirewallRuleGroup with a VPC, to provide DNS filtering for the VPC. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/AssociateFirewallRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.associate_firewall_rule_group(
          CreatorRequestId='string',
          FirewallRuleGroupId='string',
          VpcId='string',
          Priority=123,
          Name='string',
          MutationProtection='ENABLED'|'DISABLED',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp. 

      This field is autopopulated if not provided.

    
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group. 

      

    
    :type VpcId: string
    :param VpcId: **[REQUIRED]** 

      The unique identifier of the VPC that you want to associate with the rule group. 

      

    
    :type Priority: integer
    :param Priority: **[REQUIRED]** 

      The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. 

       

      You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 101, 200, and so on. You can change the priority setting for a rule group association after you create it.

       

      The allowed values for ``Priority`` are between 100 and 9900.

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      A name that lets you identify the association, to manage and use it.

      

    
    :type MutationProtection: string
    :param MutationProtection: 

      If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. When you create the association, the default setting is ``DISABLED`` . 

      

    
    :type Tags: list
    :param Tags: 

      A list of the tag keys and values that you want to associate with the rule group association. 

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroupAssociation': {
                'Id': 'string',
                'Arn': 'string',
                'FirewallRuleGroupId': 'string',
                'VpcId': 'string',
                'Name': 'string',
                'Priority': 123,
                'MutationProtection': 'ENABLED'|'DISABLED',
                'ManagedOwnerName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroupAssociation** *(dict) --* 

          The association that you just created. The association has an ID that you can use to identify it in other requests, like update and delete.

          
          

          - **Id** *(string) --* 

            The identifier for the association.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall rule group association.

            
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group. 

            
          

          - **VpcId** *(string) --* 

            The unique identifier of the VPC that is associated with the rule group. 

            
          

          - **Name** *(string) --* 

            The name of the association.

            
          

          - **Priority** *(integer) --* 

            The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from rule group with the lowest numeric priority setting. 

            
          

          - **MutationProtection** *(string) --* 

            If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the association, used only for associations that are not managed by you. If you use AWS Firewall Manager to manage your DNS Firewalls, then this reports Firewall Manager as the managed owner.

            
          

          - **Status** *(string) --* 

            The current status of the association.

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the response, if available.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the association was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the association was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_resolver_endpoint_ip_address(**kwargs)

    

    Adds IP addresses to an inbound or an outbound Resolver endpoint. If you want to add more than one IP address, submit one ``AssociateResolverEndpointIpAddress`` request for each IP address.

     

    To remove an IP address from an endpoint, see `DisassociateResolverEndpointIpAddress <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverEndpointIpAddress.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/AssociateResolverEndpointIpAddress>`_    


    **Request Syntax** 
    ::

      response = client.associate_resolver_endpoint_ip_address(
          ResolverEndpointId='string',
          IpAddress={
              'IpId': 'string',
              'SubnetId': 'string',
              'Ip': 'string'
          }
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to associate IP addresses with.

      

    
    :type IpAddress: dict
    :param IpAddress: **[REQUIRED]** 

      Either the IPv4 address that you want to add to a Resolver endpoint or a subnet ID. If you specify a subnet ID, Resolver chooses an IP address for you from the available IPs in the specified subnet.

      

    
      - **IpId** *(string) --* 

         *Only when removing an IP address from a Resolver endpoint* : The ID of the IP address that you want to remove. To get this ID, use `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ .

        

      
      - **SubnetId** *(string) --* 

        The ID of the subnet that includes the IP address that you want to update. To get this ID, use `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ .

        

      
      - **Ip** *(string) --* 

        The new IP address.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverEndpoint': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'Name': 'string',
                'SecurityGroupIds': [
                    'string',
                ],
                'Direction': 'INBOUND'|'OUTBOUND',
                'IpAddressCount': 123,
                'HostVPCId': 'string',
                'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                'StatusMessage': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverEndpoint** *(dict) --* 

          The response to an ``AssociateResolverEndpointIpAddress`` request.

          
          

          - **Id** *(string) --* 

            The ID of the Resolver endpoint.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver endpoint.

            
          

          - **Name** *(string) --* 

            The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

            
          

          - **SecurityGroupIds** *(list) --* 

            The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

            
            

            - *(string) --* 
        
          

          - **Direction** *(string) --* 

            Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

             

             
            * ``INBOUND`` : allows DNS queries to your VPC from your network 
             
            * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
             

            
          

          - **IpAddressCount** *(integer) --* 

            The number of IP addresses that the Resolver endpoint can use for DNS queries.

            
          

          - **HostVPCId** *(string) --* 

            The ID of the VPC that you want to create the Resolver endpoint in.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver endpoint. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
             
            * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
             
            * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
             
            * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
             
            * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

               
              * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
               
              * The network interface couldn't be created for some reason that's outside the control of Resolver. 
               

             
             
            * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
             

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the Resolver endpoint.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_resolver_query_log_config(**kwargs)

    

    Associates an Amazon VPC with a specified query logging configuration. Route 53 Resolver logs DNS queries that originate in all of the Amazon VPCs that are associated with a specified query logging configuration. To associate more than one VPC with a configuration, submit one ``AssociateResolverQueryLogConfig`` request for each VPC.

     

    .. note::

       

      The VPCs that you associate with a query logging configuration must be in the same Region as the configuration.

       

     

    To remove a VPC from a query logging configuration, see `DisassociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/AssociateResolverQueryLogConfig>`_    


    **Request Syntax** 
    ::

      response = client.associate_resolver_query_log_config(
          ResolverQueryLogConfigId='string',
          ResourceId='string'
      )
    :type ResolverQueryLogConfigId: string
    :param ResolverQueryLogConfigId: **[REQUIRED]** 

      The ID of the query logging configuration that you want to associate a VPC with.

      

    
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The ID of an Amazon VPC that you want this query logging configuration to log queries for.

       

      .. note::

         

        The VPCs and the query logging configuration must be in the same Region.

         

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfigAssociation': {
                'Id': 'string',
                'ResolverQueryLogConfigId': 'string',
                'ResourceId': 'string',
                'Status': 'CREATING'|'ACTIVE'|'ACTION_NEEDED'|'DELETING'|'FAILED',
                'Error': 'NONE'|'DESTINATION_NOT_FOUND'|'ACCESS_DENIED'|'INTERNAL_SERVICE_ERROR',
                'ErrorMessage': 'string',
                'CreationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfigAssociation** *(dict) --* 

          A complex type that contains settings for a specified association between an Amazon VPC and a query logging configuration.

          
          

          - **Id** *(string) --* 

            The ID of the query logging association.

            
          

          - **ResolverQueryLogConfigId** *(string) --* 

            The ID of the query logging configuration that a VPC is associated with.

            
          

          - **ResourceId** *(string) --* 

            The ID of the Amazon VPC that is associated with the query logging configuration.

            
          

          - **Status** *(string) --* 

            The status of the specified query logging association. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
             
            * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
             
            * ``DELETING`` : Resolver is deleting this query logging association. 
             
            * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. 
             

            
          

          - **Error** *(string) --* 

            If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:

             

             
            * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
             
            * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
             

             

            If the value of ``Status`` is a value other than ``FAILED`` , ``Error`` is null. 

            
          

          - **ErrorMessage** *(string) --* 

            Contains additional information about the error. If the value or ``Error`` is null, the value of ``ErrorMessage`` also is null.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: associate_resolver_rule(**kwargs)

    

    Associates a Resolver rule with a VPC. When you associate a rule with a VPC, Resolver forwards all DNS queries for the domain name that is specified in the rule and that originate in the VPC. The queries are forwarded to the IP addresses for the DNS resolvers that are specified in the rule. For more information about rules, see `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/AssociateResolverRule>`_    


    **Request Syntax** 
    ::

      response = client.associate_resolver_rule(
          ResolverRuleId='string',
          Name='string',
          VPCId='string'
      )
    :type ResolverRuleId: string
    :param ResolverRuleId: **[REQUIRED]** 

      The ID of the Resolver rule that you want to associate with the VPC. To list the existing Resolver rules, use `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ .

      

    
    :type Name: string
    :param Name: 

      A name for the association that you're creating between a Resolver rule and a VPC.

      

    
    :type VPCId: string
    :param VPCId: **[REQUIRED]** 

      The ID of the VPC that you want to associate the Resolver rule with.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRuleAssociation': {
                'Id': 'string',
                'ResolverRuleId': 'string',
                'Name': 'string',
                'VPCId': 'string',
                'Status': 'CREATING'|'COMPLETE'|'DELETING'|'FAILED'|'OVERRIDDEN',
                'StatusMessage': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRuleAssociation** *(dict) --* 

          Information about the ``AssociateResolverRule`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ request.

            
          

          - **ResolverRuleId** *(string) --* 

            The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId`` .

            
          

          - **Name** *(string) --* 

            The name of an association between a Resolver rule and a VPC.

            
          

          - **VPCId** *(string) --* 

            The ID of the VPC that you associated the Resolver rule with.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the association between a Resolver rule and a VPC.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the association between a Resolver rule and a VPC.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_firewall_domain_list(**kwargs)

    

    Creates an empty firewall domain list for use in DNS Firewall rules. You can populate the domains for the new list with a file, using  ImportFirewallDomains , or with domain strings, using  UpdateFirewallDomains . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateFirewallDomainList>`_    


    **Request Syntax** 
    ::

      response = client.create_firewall_domain_list(
          CreatorRequestId='string',
          Name='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string that identifies the request and that allows you to retry failed requests without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp. 

      This field is autopopulated if not provided.

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      A name that lets you identify the domain list to manage and use it.

      

    
    :type Tags: list
    :param Tags: 

      A list of the tag keys and values that you want to associate with the domain list. 

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallDomainList': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'DomainCount': 123,
                'Status': 'COMPLETE'|'COMPLETE_IMPORT_FAILED'|'IMPORTING'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'ManagedOwnerName': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallDomainList** *(dict) --* 

          The domain list that you just created.

          
          

          - **Id** *(string) --* 

            The ID of the domain list. 

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall domain list.

            
          

          - **Name** *(string) --* 

            The name of the domain list. 

            
          

          - **DomainCount** *(integer) --* 

            The number of domain names that are specified in the domain list.

            
          

          - **Status** *(string) --* 

            The status of the domain list. 

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the list, if available.

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the list, used only for lists that are not managed by you. For example, the managed domain list ``AWSManagedDomainsMalwareDomainList`` has the managed owner name ``Route 53 Resolver DNS Firewall`` .

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). 

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_firewall_rule(**kwargs)

    

    Creates a single DNS Firewall rule in the specified rule group, using the specified domain list.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateFirewallRule>`_    


    **Request Syntax** 
    ::

      response = client.create_firewall_rule(
          CreatorRequestId='string',
          FirewallRuleGroupId='string',
          FirewallDomainListId='string',
          Priority=123,
          Action='ALLOW'|'BLOCK'|'ALERT',
          BlockResponse='NODATA'|'NXDOMAIN'|'OVERRIDE',
          BlockOverrideDomain='string',
          BlockOverrideDnsType='CNAME',
          BlockOverrideTtl=123,
          Name='string'
      )
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string that identifies the request and that allows you to retry failed requests without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp. 

      This field is autopopulated if not provided.

    
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group where you want to create the rule. 

      

    
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list that you want to use in the rule. 

      

    
    :type Priority: integer
    :param Priority: **[REQUIRED]** 

      The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

       

      You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.

      

    
    :type Action: string
    :param Action: **[REQUIRED]** 

      The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

       

       
      * ``ALLOW`` - Permit the request to go through. 
       
      * ``ALERT`` - Permit the request and send metrics and logs to Cloud Watch. 
       
      * ``BLOCK`` - Disallow the request. This option requires additional details in the rule's ``BlockResponse`` .  
       

      

    
    :type BlockResponse: string
    :param BlockResponse: 

      The way that you want DNS Firewall to block the request, used with the rule action setting ``BLOCK`` . 

       

       
      * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
       
      * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
       
      * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
       

       

      This setting is required if the rule action setting is ``BLOCK`` .

      

    
    :type BlockOverrideDomain: string
    :param BlockOverrideDomain: 

      The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

       

      This setting is required if the ``BlockResponse`` setting is ``OVERRIDE`` .

      

    
    :type BlockOverrideDnsType: string
    :param BlockOverrideDnsType: 

      The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

       

      This setting is required if the ``BlockResponse`` setting is ``OVERRIDE`` .

      

    
    :type BlockOverrideTtl: integer
    :param BlockOverrideTtl: 

      The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

       

      This setting is required if the ``BlockResponse`` setting is ``OVERRIDE`` .

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      A name that lets you identify the rule in the rule group.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRule': {
                'FirewallRuleGroupId': 'string',
                'FirewallDomainListId': 'string',
                'Name': 'string',
                'Priority': 123,
                'Action': 'ALLOW'|'BLOCK'|'ALERT',
                'BlockResponse': 'NODATA'|'NXDOMAIN'|'OVERRIDE',
                'BlockOverrideDomain': 'string',
                'BlockOverrideDnsType': 'CNAME',
                'BlockOverrideTtl': 123,
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRule** *(dict) --* 

          The firewall rule that you just created. 

          
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group of the rule. 

            
          

          - **FirewallDomainListId** *(string) --* 

            The ID of the domain list that's used in the rule. 

            
          

          - **Name** *(string) --* 

            The name of the rule. 

            
          

          - **Priority** *(integer) --* 

            The priority of the rule in the rule group. This value must be unique within the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

            
          

          - **Action** *(string) --* 

            The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

             

             
            * ``ALLOW`` - Permit the request to go through. 
             
            * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
             
            * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
             

            
          

          - **BlockResponse** *(string) --* 

            The way that you want DNS Firewall to block the request. Used for the rule action setting ``BLOCK`` .

             

             
            * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
             
            * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
             
            * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
             

            
          

          - **BlockOverrideDomain** *(string) --* 

            The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **BlockOverrideDnsType** *(string) --* 

            The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **BlockOverrideTtl** *(integer) --* 

            The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of executing the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_firewall_rule_group(**kwargs)

    

    Creates an empty DNS Firewall rule group for filtering DNS network traffic in a VPC. You can add rules to the new rule group by calling  CreateFirewallRule . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateFirewallRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.create_firewall_rule_group(
          CreatorRequestId='string',
          Name='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

      This field is autopopulated if not provided.

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      A name that lets you identify the rule group, to manage and use it.

      

    
    :type Tags: list
    :param Tags: 

      A list of the tag keys and values that you want to associate with the rule group. 

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroup': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'RuleCount': 123,
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'OwnerId': 'string',
                'CreatorRequestId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroup** *(dict) --* 

          A collection of rules used to filter DNS network traffic. 

          
          

          - **Id** *(string) --* 

            The ID of the rule group. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) of the rule group.

            
          

          - **Name** *(string) --* 

            The name of the rule group.

            
          

          - **RuleCount** *(integer) --* 

            The number of rules in the rule group.

            
          

          - **Status** *(string) --* 

            The status of the domain list. 

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the rule group, if available.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. 

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule group is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

            
          

          - **CreationTime** *(string) --* 

            The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_resolver_endpoint(**kwargs)

    

    Creates a Resolver endpoint. There are two types of Resolver endpoints, inbound and outbound:

     

     
    * An *inbound Resolver endpoint* forwards DNS queries to the DNS service for a VPC from your network. 
     
    * An *outbound Resolver endpoint* forwards DNS queries from the DNS service for a VPC to your network. 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateResolverEndpoint>`_    


    **Request Syntax** 
    ::

      response = client.create_resolver_endpoint(
          CreatorRequestId='string',
          Name='string',
          SecurityGroupIds=[
              'string',
          ],
          Direction='INBOUND'|'OUTBOUND',
          IpAddresses=[
              {
                  'SubnetId': 'string',
                  'Ip': 'string'
              },
          ],
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp. 

      

    
    :type Name: string
    :param Name: 

      A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.

      

    
    :type SecurityGroupIds: list
    :param SecurityGroupIds: **[REQUIRED]** 

      The ID of one or more security groups that you want to use to control access to this VPC. The security group that you specify must include one or more inbound rules (for inbound Resolver endpoints) or outbound rules (for outbound Resolver endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

      

    
      - *(string) --* 

      
  
    :type Direction: string
    :param Direction: **[REQUIRED]** 

      Specify the applicable value:

       

       
      * ``INBOUND`` : Resolver forwards DNS queries to the DNS service for a VPC from your network 
       
      * ``OUTBOUND`` : Resolver forwards DNS queries from the DNS service for a VPC to your network 
       

      

    
    :type IpAddresses: list
    :param IpAddresses: **[REQUIRED]** 

      The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC. 

      

    
      - *(dict) --* 

        In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, the IP address that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). ``IpAddressRequest`` also includes the ID of the subnet that contains the IP address.

        

      
        - **SubnetId** *(string) --* **[REQUIRED]** 

          The ID of the subnet that contains the IP address. 

          

        
        - **Ip** *(string) --* 

          The IP address that you want to use for DNS queries.

          

        
      
  
    :type Tags: list
    :param Tags: 

      A list of the tag keys and values that you want to associate with the endpoint.

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverEndpoint': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'Name': 'string',
                'SecurityGroupIds': [
                    'string',
                ],
                'Direction': 'INBOUND'|'OUTBOUND',
                'IpAddressCount': 123,
                'HostVPCId': 'string',
                'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                'StatusMessage': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverEndpoint** *(dict) --* 

          Information about the ``CreateResolverEndpoint`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID of the Resolver endpoint.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver endpoint.

            
          

          - **Name** *(string) --* 

            The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

            
          

          - **SecurityGroupIds** *(list) --* 

            The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

            
            

            - *(string) --* 
        
          

          - **Direction** *(string) --* 

            Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

             

             
            * ``INBOUND`` : allows DNS queries to your VPC from your network 
             
            * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
             

            
          

          - **IpAddressCount** *(integer) --* 

            The number of IP addresses that the Resolver endpoint can use for DNS queries.

            
          

          - **HostVPCId** *(string) --* 

            The ID of the VPC that you want to create the Resolver endpoint in.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver endpoint. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
             
            * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
             
            * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
             
            * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
             
            * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

               
              * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
               
              * The network interface couldn't be created for some reason that's outside the control of Resolver. 
               

             
             
            * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
             

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the Resolver endpoint.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_resolver_query_log_config(**kwargs)

    

    Creates a Resolver query logging configuration, which defines where you want Resolver to save DNS query logs that originate in your VPCs. Resolver can log queries only for VPCs that are in the same Region as the query logging configuration.

     

    To specify which VPCs you want to log queries for, you use ``AssociateResolverQueryLogConfig`` . For more information, see `AssociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverQueryLogConfig.html>`__ . 

     

    You can optionally use AWS Resource Access Manager (AWS RAM) to share a query logging configuration with other AWS accounts. The other accounts can then associate VPCs with the configuration. The query logs that Resolver creates for a configuration include all DNS queries that originate in all VPCs that are associated with the configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateResolverQueryLogConfig>`_    


    **Request Syntax** 
    ::

      response = client.create_resolver_query_log_config(
          Name='string',
          DestinationArn='string',
          CreatorRequestId='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name that you want to give the query logging configuration.

      

    
    :type DestinationArn: string
    :param DestinationArn: **[REQUIRED]** 

      The ARN of the resource that you want Resolver to send query logs. You can send query logs to an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. Examples of valid values include the following:

       

       
      * **S3 bucket** :   ``arn:aws:s3:::examplebucket``   You can optionally append a file prefix to the end of the ARN.  ``arn:aws:s3:::examplebucket/development/``   
       
      * **CloudWatch Logs log group** :   ``arn:aws:logs:us-west-1:123456789012:log-group:/mystack-testgroup-12ABC1AB12A1:*``   
       
      * **Kinesis Data Firehose delivery stream** :  ``arn:aws:kinesis:us-east-2:0123456789:stream/my_stream_name``   
       

      

    
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp. 

      This field is autopopulated if not provided.

    
    :type Tags: list
    :param Tags: 

      A list of the tag keys and values that you want to associate with the query logging configuration.

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfig': {
                'Id': 'string',
                'OwnerId': 'string',
                'Status': 'CREATING'|'CREATED'|'DELETING'|'FAILED',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'AssociationCount': 123,
                'Arn': 'string',
                'Name': 'string',
                'DestinationArn': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfig** *(dict) --* 

          Information about the ``CreateResolverQueryLogConfig`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID for the query logging configuration.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID for the account that created the query logging configuration. 

            
          

          - **Status** *(string) --* 

            The status of the specified query logging configuration. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating the query logging configuration. 
             
            * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
             
            * ``DELETING`` : Resolver is deleting this query logging configuration. 
             
            * ``FAILED`` : Resolver can't deliver logs to the location that is specified in the query logging configuration. Here are two common causes: 

               
              * The specified destination (for example, an Amazon S3 bucket) was deleted. 
               
              * Permissions don't allow sending logs to the destination. 
               

             
             

            
          

          - **ShareStatus** *(string) --* 

            An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

            
          

          - **AssociationCount** *(integer) --* 

            The number of VPCs that are associated with the query logging configuration.

            
          

          - **Arn** *(string) --* 

            The ARN for the query logging configuration.

            
          

          - **Name** *(string) --* 

            The name of the query logging configuration. 

            
          

          - **DestinationArn** *(string) --* 

            The ARN of the resource that you want Resolver to send query logs: an Amazon S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the query logging configuration. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_resolver_rule(**kwargs)

    

    For DNS queries that originate in your VPCs, specifies which Resolver endpoint the queries pass through, one domain name that you want to forward to your network, and the IP addresses of the DNS resolvers in your network.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateResolverRule>`_    


    **Request Syntax** 
    ::

      response = client.create_resolver_rule(
          CreatorRequestId='string',
          Name='string',
          RuleType='FORWARD'|'SYSTEM'|'RECURSIVE',
          DomainName='string',
          TargetIps=[
              {
                  'Ip': 'string',
                  'Port': 123
              },
          ],
          ResolverEndpointId='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type CreatorRequestId: string
    :param CreatorRequestId: **[REQUIRED]** 

      A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string, for example, a date/time stamp. 

      

    
    :type Name: string
    :param Name: 

      A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.

      

    
    :type RuleType: string
    :param RuleType: **[REQUIRED]** 

      When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

       

      When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

       

      For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

       

      Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

      

    
    :type DomainName: string
    :param DomainName: **[REQUIRED]** 

      DNS queries for this domain name are forwarded to the IP addresses that you specify in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), outbound DNS queries are routed using the Resolver rule that contains the most specific domain name (www.example.com).

      

    
    :type TargetIps: list
    :param TargetIps: 

      The IPs that you want Resolver to forward DNS queries to. You can specify only IPv4 addresses. Separate IP addresses with a space.

       

       ``TargetIps`` is available only when the value of ``Rule type`` is ``FORWARD`` .

      

    
      - *(dict) --* 

        In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

        

      
        - **Ip** *(string) --* **[REQUIRED]** 

          One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

          

        
        - **Port** *(integer) --* 

          The port at ``Ip`` that you want to forward DNS queries to.

          

        
      
  
    :type ResolverEndpointId: string
    :param ResolverEndpointId: 

      The ID of the outbound Resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify in ``TargetIps`` .

      

    
    :type Tags: list
    :param Tags: 

      A list of the tag keys and values that you want to associate with the endpoint.

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRule': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'DomainName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING'|'FAILED',
                'StatusMessage': 'string',
                'RuleType': 'FORWARD'|'SYSTEM'|'RECURSIVE',
                'Name': 'string',
                'TargetIps': [
                    {
                        'Ip': 'string',
                        'Port': 123
                    },
                ],
                'ResolverEndpointId': 'string',
                'OwnerId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRule** *(dict) --* 

          Information about the ``CreateResolverRule`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID that Resolver assigned to the Resolver rule when you created it.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that you specified when you created the Resolver rule. ``CreatorRequestId`` identifies the request and allows failed requests to be retried without the risk of running the operation twice. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver rule specified by ``Id`` .

            
          

          - **DomainName** *(string) --* 

            DNS queries for this domain name are forwarded to the IP addresses that are specified in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver rule.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of a Resolver rule.

            
          

          - **RuleType** *(string) --* 

            When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

             

            When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

             

            For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

             

            Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

            
          

          - **Name** *(string) --* 

            The name for the Resolver rule, which you specified when you created the Resolver rule.

            
          

          - **TargetIps** *(list) --* 

            An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.

            
            

            - *(dict) --* 

              In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

              
              

              - **Ip** *(string) --* 

                One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

                
              

              - **Port** *(integer) --* 

                The port at ``Ip`` that you want to forward DNS queries to.

                
          
        
          

          - **ResolverEndpointId** *(string) --* 

            The ID of the endpoint that the rule is associated with.

            
          

          - **OwnerId** *(string) --* 

            When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_firewall_domain_list(**kwargs)

    

    Deletes the specified domain list. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DeleteFirewallDomainList>`_    


    **Request Syntax** 
    ::

      response = client.delete_firewall_domain_list(
          FirewallDomainListId='string'
      )
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list that you want to delete. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallDomainList': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'DomainCount': 123,
                'Status': 'COMPLETE'|'COMPLETE_IMPORT_FAILED'|'IMPORTING'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'ManagedOwnerName': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallDomainList** *(dict) --* 

          The domain list that you just deleted. 

          
          

          - **Id** *(string) --* 

            The ID of the domain list. 

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall domain list.

            
          

          - **Name** *(string) --* 

            The name of the domain list. 

            
          

          - **DomainCount** *(integer) --* 

            The number of domain names that are specified in the domain list.

            
          

          - **Status** *(string) --* 

            The status of the domain list. 

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the list, if available.

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the list, used only for lists that are not managed by you. For example, the managed domain list ``AWSManagedDomainsMalwareDomainList`` has the managed owner name ``Route 53 Resolver DNS Firewall`` .

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). 

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_firewall_rule(**kwargs)

    

    Deletes the specified firewall rule.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DeleteFirewallRule>`_    


    **Request Syntax** 
    ::

      response = client.delete_firewall_rule(
          FirewallRuleGroupId='string',
          FirewallDomainListId='string'
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group that you want to delete the rule from. 

      

    
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list that's used in the rule. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRule': {
                'FirewallRuleGroupId': 'string',
                'FirewallDomainListId': 'string',
                'Name': 'string',
                'Priority': 123,
                'Action': 'ALLOW'|'BLOCK'|'ALERT',
                'BlockResponse': 'NODATA'|'NXDOMAIN'|'OVERRIDE',
                'BlockOverrideDomain': 'string',
                'BlockOverrideDnsType': 'CNAME',
                'BlockOverrideTtl': 123,
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRule** *(dict) --* 

          The specification for the firewall rule that you just deleted.

          
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group of the rule. 

            
          

          - **FirewallDomainListId** *(string) --* 

            The ID of the domain list that's used in the rule. 

            
          

          - **Name** *(string) --* 

            The name of the rule. 

            
          

          - **Priority** *(integer) --* 

            The priority of the rule in the rule group. This value must be unique within the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

            
          

          - **Action** *(string) --* 

            The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

             

             
            * ``ALLOW`` - Permit the request to go through. 
             
            * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
             
            * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
             

            
          

          - **BlockResponse** *(string) --* 

            The way that you want DNS Firewall to block the request. Used for the rule action setting ``BLOCK`` .

             

             
            * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
             
            * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
             
            * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
             

            
          

          - **BlockOverrideDomain** *(string) --* 

            The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **BlockOverrideDnsType** *(string) --* 

            The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **BlockOverrideTtl** *(integer) --* 

            The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of executing the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_firewall_rule_group(**kwargs)

    

    Deletes the specified firewall rule group. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DeleteFirewallRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.delete_firewall_rule_group(
          FirewallRuleGroupId='string'
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group that you want to delete. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroup': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'RuleCount': 123,
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'OwnerId': 'string',
                'CreatorRequestId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroup** *(dict) --* 

          A collection of rules used to filter DNS network traffic. 

          
          

          - **Id** *(string) --* 

            The ID of the rule group. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) of the rule group.

            
          

          - **Name** *(string) --* 

            The name of the rule group.

            
          

          - **RuleCount** *(integer) --* 

            The number of rules in the rule group.

            
          

          - **Status** *(string) --* 

            The status of the domain list. 

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the rule group, if available.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. 

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule group is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

            
          

          - **CreationTime** *(string) --* 

            The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_resolver_endpoint(**kwargs)

    

    Deletes a Resolver endpoint. The effect of deleting a Resolver endpoint depends on whether it's an inbound or an outbound Resolver endpoint:

     

     
    * **Inbound** : DNS queries from your network are no longer routed to the DNS service for the specified VPC. 
     
    * **Outbound** : DNS queries from a VPC are no longer routed to your network. 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DeleteResolverEndpoint>`_    


    **Request Syntax** 
    ::

      response = client.delete_resolver_endpoint(
          ResolverEndpointId='string'
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverEndpoint': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'Name': 'string',
                'SecurityGroupIds': [
                    'string',
                ],
                'Direction': 'INBOUND'|'OUTBOUND',
                'IpAddressCount': 123,
                'HostVPCId': 'string',
                'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                'StatusMessage': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverEndpoint** *(dict) --* 

          Information about the ``DeleteResolverEndpoint`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID of the Resolver endpoint.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver endpoint.

            
          

          - **Name** *(string) --* 

            The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

            
          

          - **SecurityGroupIds** *(list) --* 

            The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

            
            

            - *(string) --* 
        
          

          - **Direction** *(string) --* 

            Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

             

             
            * ``INBOUND`` : allows DNS queries to your VPC from your network 
             
            * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
             

            
          

          - **IpAddressCount** *(integer) --* 

            The number of IP addresses that the Resolver endpoint can use for DNS queries.

            
          

          - **HostVPCId** *(string) --* 

            The ID of the VPC that you want to create the Resolver endpoint in.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver endpoint. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
             
            * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
             
            * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
             
            * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
             
            * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

               
              * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
               
              * The network interface couldn't be created for some reason that's outside the control of Resolver. 
               

             
             
            * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
             

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the Resolver endpoint.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_resolver_query_log_config(**kwargs)

    

    Deletes a query logging configuration. When you delete a configuration, Resolver stops logging DNS queries for all of the Amazon VPCs that are associated with the configuration. This also applies if the query logging configuration is shared with other AWS accounts, and the other accounts have associated VPCs with the shared configuration.

     

    Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. See `DisassociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html>`__ .

     

    If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, you must stop sharing the configuration before you can delete a configuration. The accounts that you shared the configuration with can first disassociate VPCs that they associated with the configuration, but that's not necessary. If you stop sharing the configuration, those VPCs are automatically disassociated from the configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DeleteResolverQueryLogConfig>`_    


    **Request Syntax** 
    ::

      response = client.delete_resolver_query_log_config(
          ResolverQueryLogConfigId='string'
      )
    :type ResolverQueryLogConfigId: string
    :param ResolverQueryLogConfigId: **[REQUIRED]** 

      The ID of the query logging configuration that you want to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfig': {
                'Id': 'string',
                'OwnerId': 'string',
                'Status': 'CREATING'|'CREATED'|'DELETING'|'FAILED',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'AssociationCount': 123,
                'Arn': 'string',
                'Name': 'string',
                'DestinationArn': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfig** *(dict) --* 

          Information about the query logging configuration that you deleted, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID for the query logging configuration.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID for the account that created the query logging configuration. 

            
          

          - **Status** *(string) --* 

            The status of the specified query logging configuration. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating the query logging configuration. 
             
            * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
             
            * ``DELETING`` : Resolver is deleting this query logging configuration. 
             
            * ``FAILED`` : Resolver can't deliver logs to the location that is specified in the query logging configuration. Here are two common causes: 

               
              * The specified destination (for example, an Amazon S3 bucket) was deleted. 
               
              * Permissions don't allow sending logs to the destination. 
               

             
             

            
          

          - **ShareStatus** *(string) --* 

            An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

            
          

          - **AssociationCount** *(integer) --* 

            The number of VPCs that are associated with the query logging configuration.

            
          

          - **Arn** *(string) --* 

            The ARN for the query logging configuration.

            
          

          - **Name** *(string) --* 

            The name of the query logging configuration. 

            
          

          - **DestinationArn** *(string) --* 

            The ARN of the resource that you want Resolver to send query logs: an Amazon S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the query logging configuration. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_resolver_rule(**kwargs)

    

    Deletes a Resolver rule. Before you can delete a Resolver rule, you must disassociate it from all the VPCs that you associated the Resolver rule with. For more information, see `DisassociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DeleteResolverRule>`_    


    **Request Syntax** 
    ::

      response = client.delete_resolver_rule(
          ResolverRuleId='string'
      )
    :type ResolverRuleId: string
    :param ResolverRuleId: **[REQUIRED]** 

      The ID of the Resolver rule that you want to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRule': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'DomainName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING'|'FAILED',
                'StatusMessage': 'string',
                'RuleType': 'FORWARD'|'SYSTEM'|'RECURSIVE',
                'Name': 'string',
                'TargetIps': [
                    {
                        'Ip': 'string',
                        'Port': 123
                    },
                ],
                'ResolverEndpointId': 'string',
                'OwnerId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRule** *(dict) --* 

          Information about the ``DeleteResolverRule`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID that Resolver assigned to the Resolver rule when you created it.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that you specified when you created the Resolver rule. ``CreatorRequestId`` identifies the request and allows failed requests to be retried without the risk of running the operation twice. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver rule specified by ``Id`` .

            
          

          - **DomainName** *(string) --* 

            DNS queries for this domain name are forwarded to the IP addresses that are specified in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver rule.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of a Resolver rule.

            
          

          - **RuleType** *(string) --* 

            When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

             

            When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

             

            For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

             

            Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

            
          

          - **Name** *(string) --* 

            The name for the Resolver rule, which you specified when you created the Resolver rule.

            
          

          - **TargetIps** *(list) --* 

            An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.

            
            

            - *(dict) --* 

              In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

              
              

              - **Ip** *(string) --* 

                One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

                
              

              - **Port** *(integer) --* 

                The port at ``Ip`` that you want to forward DNS queries to.

                
          
        
          

          - **ResolverEndpointId** *(string) --* 

            The ID of the endpoint that the rule is associated with.

            
          

          - **OwnerId** *(string) --* 

            When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_firewall_rule_group(**kwargs)

    

    Disassociates a  FirewallRuleGroup from a VPC, to remove DNS filtering from the VPC. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DisassociateFirewallRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_firewall_rule_group(
          FirewallRuleGroupAssociationId='string'
      )
    :type FirewallRuleGroupAssociationId: string
    :param FirewallRuleGroupAssociationId: **[REQUIRED]** 

      The identifier of the  FirewallRuleGroupAssociation . 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroupAssociation': {
                'Id': 'string',
                'Arn': 'string',
                'FirewallRuleGroupId': 'string',
                'VpcId': 'string',
                'Name': 'string',
                'Priority': 123,
                'MutationProtection': 'ENABLED'|'DISABLED',
                'ManagedOwnerName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroupAssociation** *(dict) --* 

          The firewall rule group association that you just removed. 

          
          

          - **Id** *(string) --* 

            The identifier for the association.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall rule group association.

            
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group. 

            
          

          - **VpcId** *(string) --* 

            The unique identifier of the VPC that is associated with the rule group. 

            
          

          - **Name** *(string) --* 

            The name of the association.

            
          

          - **Priority** *(integer) --* 

            The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from rule group with the lowest numeric priority setting. 

            
          

          - **MutationProtection** *(string) --* 

            If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the association, used only for associations that are not managed by you. If you use AWS Firewall Manager to manage your DNS Firewalls, then this reports Firewall Manager as the managed owner.

            
          

          - **Status** *(string) --* 

            The current status of the association.

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the response, if available.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the association was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the association was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_resolver_endpoint_ip_address(**kwargs)

    

    Removes IP addresses from an inbound or an outbound Resolver endpoint. If you want to remove more than one IP address, submit one ``DisassociateResolverEndpointIpAddress`` request for each IP address.

     

    To add an IP address to an endpoint, see `AssociateResolverEndpointIpAddress <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverEndpointIpAddress.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DisassociateResolverEndpointIpAddress>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_resolver_endpoint_ip_address(
          ResolverEndpointId='string',
          IpAddress={
              'IpId': 'string',
              'SubnetId': 'string',
              'Ip': 'string'
          }
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to disassociate an IP address from.

      

    
    :type IpAddress: dict
    :param IpAddress: **[REQUIRED]** 

      The IPv4 address that you want to remove from a Resolver endpoint.

      

    
      - **IpId** *(string) --* 

         *Only when removing an IP address from a Resolver endpoint* : The ID of the IP address that you want to remove. To get this ID, use `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ .

        

      
      - **SubnetId** *(string) --* 

        The ID of the subnet that includes the IP address that you want to update. To get this ID, use `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ .

        

      
      - **Ip** *(string) --* 

        The new IP address.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverEndpoint': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'Name': 'string',
                'SecurityGroupIds': [
                    'string',
                ],
                'Direction': 'INBOUND'|'OUTBOUND',
                'IpAddressCount': 123,
                'HostVPCId': 'string',
                'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                'StatusMessage': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverEndpoint** *(dict) --* 

          The response to an ``DisassociateResolverEndpointIpAddress`` request.

          
          

          - **Id** *(string) --* 

            The ID of the Resolver endpoint.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver endpoint.

            
          

          - **Name** *(string) --* 

            The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

            
          

          - **SecurityGroupIds** *(list) --* 

            The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

            
            

            - *(string) --* 
        
          

          - **Direction** *(string) --* 

            Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

             

             
            * ``INBOUND`` : allows DNS queries to your VPC from your network 
             
            * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
             

            
          

          - **IpAddressCount** *(integer) --* 

            The number of IP addresses that the Resolver endpoint can use for DNS queries.

            
          

          - **HostVPCId** *(string) --* 

            The ID of the VPC that you want to create the Resolver endpoint in.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver endpoint. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
             
            * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
             
            * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
             
            * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
             
            * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

               
              * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
               
              * The network interface couldn't be created for some reason that's outside the control of Resolver. 
               

             
             
            * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
             

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the Resolver endpoint.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_resolver_query_log_config(**kwargs)

    

    Disassociates a VPC from a query logging configuration.

     

    .. note::

       

      Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. If you used AWS Resource Access Manager (AWS RAM) to share a query logging configuration with other accounts, VPCs can be disassociated from the configuration in the following ways:

       

       
      * The accounts that you shared the configuration with can disassociate VPCs from the configuration. 
       
      * You can stop sharing the configuration. 
       

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DisassociateResolverQueryLogConfig>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_resolver_query_log_config(
          ResolverQueryLogConfigId='string',
          ResourceId='string'
      )
    :type ResolverQueryLogConfigId: string
    :param ResolverQueryLogConfigId: **[REQUIRED]** 

      The ID of the query logging configuration that you want to disassociate a specified VPC from.

      

    
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The ID of the Amazon VPC that you want to disassociate from a specified query logging configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfigAssociation': {
                'Id': 'string',
                'ResolverQueryLogConfigId': 'string',
                'ResourceId': 'string',
                'Status': 'CREATING'|'ACTIVE'|'ACTION_NEEDED'|'DELETING'|'FAILED',
                'Error': 'NONE'|'DESTINATION_NOT_FOUND'|'ACCESS_DENIED'|'INTERNAL_SERVICE_ERROR',
                'ErrorMessage': 'string',
                'CreationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfigAssociation** *(dict) --* 

          A complex type that contains settings for the association that you deleted between an Amazon VPC and a query logging configuration.

          
          

          - **Id** *(string) --* 

            The ID of the query logging association.

            
          

          - **ResolverQueryLogConfigId** *(string) --* 

            The ID of the query logging configuration that a VPC is associated with.

            
          

          - **ResourceId** *(string) --* 

            The ID of the Amazon VPC that is associated with the query logging configuration.

            
          

          - **Status** *(string) --* 

            The status of the specified query logging association. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
             
            * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
             
            * ``DELETING`` : Resolver is deleting this query logging association. 
             
            * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. 
             

            
          

          - **Error** *(string) --* 

            If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:

             

             
            * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
             
            * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
             

             

            If the value of ``Status`` is a value other than ``FAILED`` , ``Error`` is null. 

            
          

          - **ErrorMessage** *(string) --* 

            Contains additional information about the error. If the value or ``Error`` is null, the value of ``ErrorMessage`` also is null.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: disassociate_resolver_rule(**kwargs)

    

    Removes the association between a specified Resolver rule and a specified VPC.

     

    .. warning::

       

      If you disassociate a Resolver rule from a VPC, Resolver stops forwarding DNS queries for the domain name that you specified in the Resolver rule. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/DisassociateResolverRule>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_resolver_rule(
          VPCId='string',
          ResolverRuleId='string'
      )
    :type VPCId: string
    :param VPCId: **[REQUIRED]** 

      The ID of the VPC that you want to disassociate the Resolver rule from.

      

    
    :type ResolverRuleId: string
    :param ResolverRuleId: **[REQUIRED]** 

      The ID of the Resolver rule that you want to disassociate from the specified VPC.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRuleAssociation': {
                'Id': 'string',
                'ResolverRuleId': 'string',
                'Name': 'string',
                'VPCId': 'string',
                'Status': 'CREATING'|'COMPLETE'|'DELETING'|'FAILED'|'OVERRIDDEN',
                'StatusMessage': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRuleAssociation** *(dict) --* 

          Information about the ``DisassociateResolverRule`` request, including the status of the request.

          
          

          - **Id** *(string) --* 

            The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ request.

            
          

          - **ResolverRuleId** *(string) --* 

            The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId`` .

            
          

          - **Name** *(string) --* 

            The name of an association between a Resolver rule and a VPC.

            
          

          - **VPCId** *(string) --* 

            The ID of the VPC that you associated the Resolver rule with.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the association between a Resolver rule and a VPC.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the association between a Resolver rule and a VPC.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_firewall_config(**kwargs)

    

    Retrieves the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetFirewallConfig>`_    


    **Request Syntax** 
    ::

      response = client.get_firewall_config(
          ResourceId='string'
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The ID of the VPC from Amazon VPC that the configuration is for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallConfig': {
                'Id': 'string',
                'ResourceId': 'string',
                'OwnerId': 'string',
                'FirewallFailOpen': 'ENABLED'|'DISABLED'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallConfig** *(dict) --* 

          Configuration of the firewall behavior provided by DNS Firewall for a single VPC from AmazonVPC. 

          
          

          - **Id** *(string) --* 

            The ID of the firewall configuration.

            
          

          - **ResourceId** *(string) --* 

            The ID of the VPC that this firewall configuration applies to.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID of the owner of the VPC that this firewall configuration applies to.

            
          

          - **FirewallFailOpen** *(string) --* 

            Determines how DNS Firewall operates during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. 

             

             
            * By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall returns a failure error when it is unable to properly evaluate a query.  
             
            * If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them.  
             

             

            This behavior is only enforced for VPCs that have at least one DNS Firewall rule group association. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    

  .. py:method:: get_firewall_domain_list(**kwargs)

    

    Retrieves the specified firewall domain list.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetFirewallDomainList>`_    


    **Request Syntax** 
    ::

      response = client.get_firewall_domain_list(
          FirewallDomainListId='string'
      )
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallDomainList': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'DomainCount': 123,
                'Status': 'COMPLETE'|'COMPLETE_IMPORT_FAILED'|'IMPORTING'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'ManagedOwnerName': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallDomainList** *(dict) --* 

          The domain list that you requested. 

          
          

          - **Id** *(string) --* 

            The ID of the domain list. 

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall domain list.

            
          

          - **Name** *(string) --* 

            The name of the domain list. 

            
          

          - **DomainCount** *(integer) --* 

            The number of domain names that are specified in the domain list.

            
          

          - **Status** *(string) --* 

            The status of the domain list. 

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the list, if available.

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the list, used only for lists that are not managed by you. For example, the managed domain list ``AWSManagedDomainsMalwareDomainList`` has the managed owner name ``Route 53 Resolver DNS Firewall`` .

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). 

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_firewall_rule_group(**kwargs)

    

    Retrieves the specified firewall rule group. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetFirewallRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.get_firewall_rule_group(
          FirewallRuleGroupId='string'
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroup': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'RuleCount': 123,
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'OwnerId': 'string',
                'CreatorRequestId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroup** *(dict) --* 

          A collection of rules used to filter DNS network traffic. 

          
          

          - **Id** *(string) --* 

            The ID of the rule group. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) of the rule group.

            
          

          - **Name** *(string) --* 

            The name of the rule group.

            
          

          - **RuleCount** *(integer) --* 

            The number of rules in the rule group.

            
          

          - **Status** *(string) --* 

            The status of the domain list. 

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the rule group, if available.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. 

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule group is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

            
          

          - **CreationTime** *(string) --* 

            The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_firewall_rule_group_association(**kwargs)

    

    Retrieves a firewall rule group association, which enables DNS filtering for a VPC with one rule group. A VPC can have more than one firewall rule group association, and a rule group can be associated with more than one VPC.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetFirewallRuleGroupAssociation>`_    


    **Request Syntax** 
    ::

      response = client.get_firewall_rule_group_association(
          FirewallRuleGroupAssociationId='string'
      )
    :type FirewallRuleGroupAssociationId: string
    :param FirewallRuleGroupAssociationId: **[REQUIRED]** 

      The identifier of the  FirewallRuleGroupAssociation . 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroupAssociation': {
                'Id': 'string',
                'Arn': 'string',
                'FirewallRuleGroupId': 'string',
                'VpcId': 'string',
                'Name': 'string',
                'Priority': 123,
                'MutationProtection': 'ENABLED'|'DISABLED',
                'ManagedOwnerName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroupAssociation** *(dict) --* 

          The association that you requested. 

          
          

          - **Id** *(string) --* 

            The identifier for the association.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall rule group association.

            
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group. 

            
          

          - **VpcId** *(string) --* 

            The unique identifier of the VPC that is associated with the rule group. 

            
          

          - **Name** *(string) --* 

            The name of the association.

            
          

          - **Priority** *(integer) --* 

            The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from rule group with the lowest numeric priority setting. 

            
          

          - **MutationProtection** *(string) --* 

            If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the association, used only for associations that are not managed by you. If you use AWS Firewall Manager to manage your DNS Firewalls, then this reports Firewall Manager as the managed owner.

            
          

          - **Status** *(string) --* 

            The current status of the association.

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the response, if available.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the association was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the association was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_firewall_rule_group_policy(**kwargs)

    

    Returns the AWS Identity and Access Management (AWS IAM) policy for sharing the specified rule group. You can use the policy to share the rule group using AWS Resource Access Manager (AWS RAM). 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetFirewallRuleGroupPolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_firewall_rule_group_policy(
          Arn='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The ARN (Amazon Resource Name) for the rule group.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroupPolicy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroupPolicy** *(string) --* 

          The AWS Identity and Access Management (AWS IAM) policy for sharing the specified rule group. You can use the policy to share the rule group using AWS Resource Access Manager (AWS RAM). 

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_resolver_dnssec_config(**kwargs)

    

    Gets DNSSEC validation information for a specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverDnssecConfig>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_dnssec_config(
          ResourceId='string'
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The ID of the virtual private cloud (VPC) for the DNSSEC validation status.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverDNSSECConfig': {
                'Id': 'string',
                'OwnerId': 'string',
                'ResourceId': 'string',
                'ValidationStatus': 'ENABLING'|'ENABLED'|'DISABLING'|'DISABLED'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverDNSSECConfig** *(dict) --* 

          The information about a configuration for DNSSEC validation.

          
          

          - **Id** *(string) --* 

            The ID for a configuration for DNSSEC validation.

            
          

          - **OwnerId** *(string) --* 

            The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.

            
          

          - **ResourceId** *(string) --* 

            The ID of the virtual private cloud (VPC) that you're configuring the DNSSEC validation status for.

            
          

          - **ValidationStatus** *(string) --* 

            The validation status for a DNSSEC configuration. The status can be one of the following:

             

             
            * **ENABLING:** DNSSEC validation is being enabled but is not complete. 
             
            * **ENABLED:** DNSSEC validation is enabled. 
             
            * **DISABLING:** DNSSEC validation is being disabled but is not complete. 
             
            * **DISABLED** DNSSEC validation is disabled. 
             

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_resolver_endpoint(**kwargs)

    

    Gets information about a specified Resolver endpoint, such as whether it's an inbound or an outbound Resolver endpoint, and the current status of the endpoint.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverEndpoint>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_endpoint(
          ResolverEndpointId='string'
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverEndpoint': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'Name': 'string',
                'SecurityGroupIds': [
                    'string',
                ],
                'Direction': 'INBOUND'|'OUTBOUND',
                'IpAddressCount': 123,
                'HostVPCId': 'string',
                'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                'StatusMessage': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverEndpoint** *(dict) --* 

          Information about the Resolver endpoint that you specified in a ``GetResolverEndpoint`` request.

          
          

          - **Id** *(string) --* 

            The ID of the Resolver endpoint.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver endpoint.

            
          

          - **Name** *(string) --* 

            The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

            
          

          - **SecurityGroupIds** *(list) --* 

            The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

            
            

            - *(string) --* 
        
          

          - **Direction** *(string) --* 

            Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

             

             
            * ``INBOUND`` : allows DNS queries to your VPC from your network 
             
            * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
             

            
          

          - **IpAddressCount** *(integer) --* 

            The number of IP addresses that the Resolver endpoint can use for DNS queries.

            
          

          - **HostVPCId** *(string) --* 

            The ID of the VPC that you want to create the Resolver endpoint in.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver endpoint. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
             
            * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
             
            * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
             
            * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
             
            * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

               
              * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
               
              * The network interface couldn't be created for some reason that's outside the control of Resolver. 
               

             
             
            * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
             

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the Resolver endpoint.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_resolver_query_log_config(**kwargs)

    

    Gets information about a specified Resolver query logging configuration, such as the number of VPCs that the configuration is logging queries for and the location that logs are sent to. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverQueryLogConfig>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_query_log_config(
          ResolverQueryLogConfigId='string'
      )
    :type ResolverQueryLogConfigId: string
    :param ResolverQueryLogConfigId: **[REQUIRED]** 

      The ID of the Resolver query logging configuration that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfig': {
                'Id': 'string',
                'OwnerId': 'string',
                'Status': 'CREATING'|'CREATED'|'DELETING'|'FAILED',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'AssociationCount': 123,
                'Arn': 'string',
                'Name': 'string',
                'DestinationArn': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfig** *(dict) --* 

          Information about the Resolver query logging configuration that you specified in a ``GetQueryLogConfig`` request.

          
          

          - **Id** *(string) --* 

            The ID for the query logging configuration.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID for the account that created the query logging configuration. 

            
          

          - **Status** *(string) --* 

            The status of the specified query logging configuration. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating the query logging configuration. 
             
            * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
             
            * ``DELETING`` : Resolver is deleting this query logging configuration. 
             
            * ``FAILED`` : Resolver can't deliver logs to the location that is specified in the query logging configuration. Here are two common causes: 

               
              * The specified destination (for example, an Amazon S3 bucket) was deleted. 
               
              * Permissions don't allow sending logs to the destination. 
               

             
             

            
          

          - **ShareStatus** *(string) --* 

            An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

            
          

          - **AssociationCount** *(integer) --* 

            The number of VPCs that are associated with the query logging configuration.

            
          

          - **Arn** *(string) --* 

            The ARN for the query logging configuration.

            
          

          - **Name** *(string) --* 

            The name of the query logging configuration. 

            
          

          - **DestinationArn** *(string) --* 

            The ARN of the resource that you want Resolver to send query logs: an Amazon S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the query logging configuration. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_resolver_query_log_config_association(**kwargs)

    

    Gets information about a specified association between a Resolver query logging configuration and an Amazon VPC. When you associate a VPC with a query logging configuration, Resolver logs DNS queries that originate in that VPC.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverQueryLogConfigAssociation>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_query_log_config_association(
          ResolverQueryLogConfigAssociationId='string'
      )
    :type ResolverQueryLogConfigAssociationId: string
    :param ResolverQueryLogConfigAssociationId: **[REQUIRED]** 

      The ID of the Resolver query logging configuration association that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfigAssociation': {
                'Id': 'string',
                'ResolverQueryLogConfigId': 'string',
                'ResourceId': 'string',
                'Status': 'CREATING'|'ACTIVE'|'ACTION_NEEDED'|'DELETING'|'FAILED',
                'Error': 'NONE'|'DESTINATION_NOT_FOUND'|'ACCESS_DENIED'|'INTERNAL_SERVICE_ERROR',
                'ErrorMessage': 'string',
                'CreationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfigAssociation** *(dict) --* 

          Information about the Resolver query logging configuration association that you specified in a ``GetQueryLogConfigAssociation`` request.

          
          

          - **Id** *(string) --* 

            The ID of the query logging association.

            
          

          - **ResolverQueryLogConfigId** *(string) --* 

            The ID of the query logging configuration that a VPC is associated with.

            
          

          - **ResourceId** *(string) --* 

            The ID of the Amazon VPC that is associated with the query logging configuration.

            
          

          - **Status** *(string) --* 

            The status of the specified query logging association. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
             
            * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
             
            * ``DELETING`` : Resolver is deleting this query logging association. 
             
            * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. 
             

            
          

          - **Error** *(string) --* 

            If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:

             

             
            * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
             
            * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
             

             

            If the value of ``Status`` is a value other than ``FAILED`` , ``Error`` is null. 

            
          

          - **ErrorMessage** *(string) --* 

            Contains additional information about the error. If the value or ``Error`` is null, the value of ``ErrorMessage`` also is null.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_resolver_query_log_config_policy(**kwargs)

    

    Gets information about a query logging policy. A query logging policy specifies the Resolver query logging operations and resources that you want to allow another AWS account to be able to use.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverQueryLogConfigPolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_query_log_config_policy(
          Arn='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The ARN of the query logging configuration that you want to get the query logging policy for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverQueryLogConfigPolicy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverQueryLogConfigPolicy** *(string) --* 

          Information about the query logging policy for the query logging configuration that you specified in a ``GetResolverQueryLogConfigPolicy`` request.

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.UnknownResourceException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_resolver_rule(**kwargs)

    

    Gets information about a specified Resolver rule, such as the domain name that the rule forwards DNS queries for and the ID of the outbound Resolver endpoint that the rule is associated with.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverRule>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_rule(
          ResolverRuleId='string'
      )
    :type ResolverRuleId: string
    :param ResolverRuleId: **[REQUIRED]** 

      The ID of the Resolver rule that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRule': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'DomainName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING'|'FAILED',
                'StatusMessage': 'string',
                'RuleType': 'FORWARD'|'SYSTEM'|'RECURSIVE',
                'Name': 'string',
                'TargetIps': [
                    {
                        'Ip': 'string',
                        'Port': 123
                    },
                ],
                'ResolverEndpointId': 'string',
                'OwnerId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRule** *(dict) --* 

          Information about the Resolver rule that you specified in a ``GetResolverRule`` request.

          
          

          - **Id** *(string) --* 

            The ID that Resolver assigned to the Resolver rule when you created it.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that you specified when you created the Resolver rule. ``CreatorRequestId`` identifies the request and allows failed requests to be retried without the risk of running the operation twice. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver rule specified by ``Id`` .

            
          

          - **DomainName** *(string) --* 

            DNS queries for this domain name are forwarded to the IP addresses that are specified in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver rule.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of a Resolver rule.

            
          

          - **RuleType** *(string) --* 

            When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

             

            When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

             

            For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

             

            Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

            
          

          - **Name** *(string) --* 

            The name for the Resolver rule, which you specified when you created the Resolver rule.

            
          

          - **TargetIps** *(list) --* 

            An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.

            
            

            - *(dict) --* 

              In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

              
              

              - **Ip** *(string) --* 

                One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

                
              

              - **Port** *(integer) --* 

                The port at ``Ip`` that you want to forward DNS queries to.

                
          
        
          

          - **ResolverEndpointId** *(string) --* 

            The ID of the endpoint that the rule is associated with.

            
          

          - **OwnerId** *(string) --* 

            When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_resolver_rule_association(**kwargs)

    

    Gets information about an association between a specified Resolver rule and a VPC. You associate a Resolver rule and a VPC using `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverRuleAssociation>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_rule_association(
          ResolverRuleAssociationId='string'
      )
    :type ResolverRuleAssociationId: string
    :param ResolverRuleAssociationId: **[REQUIRED]** 

      The ID of the Resolver rule association that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRuleAssociation': {
                'Id': 'string',
                'ResolverRuleId': 'string',
                'Name': 'string',
                'VPCId': 'string',
                'Status': 'CREATING'|'COMPLETE'|'DELETING'|'FAILED'|'OVERRIDDEN',
                'StatusMessage': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRuleAssociation** *(dict) --* 

          Information about the Resolver rule association that you specified in a ``GetResolverRuleAssociation`` request.

          
          

          - **Id** *(string) --* 

            The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ request.

            
          

          - **ResolverRuleId** *(string) --* 

            The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId`` .

            
          

          - **Name** *(string) --* 

            The name of an association between a Resolver rule and a VPC.

            
          

          - **VPCId** *(string) --* 

            The ID of the VPC that you associated the Resolver rule with.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the association between a Resolver rule and a VPC.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the association between a Resolver rule and a VPC.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_resolver_rule_policy(**kwargs)

    

    Gets information about the Resolver rule policy for a specified rule. A Resolver rule policy includes the rule that you want to share with another account, the account that you want to share the rule with, and the Resolver operations that you want to allow the account to use. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/GetResolverRulePolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_resolver_rule_policy(
          Arn='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The ID of the Resolver rule that you want to get the Resolver rule policy for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRulePolicy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRulePolicy** *(string) --* 

          The Resolver rule policy for the rule that you specified in a ``GetResolverRulePolicy`` request.

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.UnknownResourceException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: import_firewall_domains(**kwargs)

    

    Imports domain names from a file into a domain list, for use in a DNS firewall rule group. 

     

    Each domain specification in your domain list must satisfy the following requirements: 

     

     
    * It can optionally start with ``*`` (asterisk). 
     
    * With the exception of the optional starting asterisk, it must only contain the following characters: ``A-Z`` , ``a-z`` , ``0-9`` , ``-`` (hyphen). 
     
    * It must be from 1-255 characters in length.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ImportFirewallDomains>`_    


    **Request Syntax** 
    ::

      response = client.import_firewall_domains(
          FirewallDomainListId='string',
          Operation='REPLACE',
          DomainFileUrl='string'
      )
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list that you want to modify with the import operation.

      

    
    :type Operation: string
    :param Operation: **[REQUIRED]** 

      What you want DNS Firewall to do with the domains that are listed in the file. This must be set to ``REPLACE`` , which updates the domain list to exactly match the list in the file. 

      

    
    :type DomainFileUrl: string
    :param DomainFileUrl: **[REQUIRED]** 

      The fully qualified URL or URI of the file stored in Amazon Simple Storage Service (Amazon S3) that contains the list of domains to import.

       

      The file must be in an S3 bucket that's in the same Region as your DNS Firewall. The file must be a text file and must contain a single domain per line.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Id': 'string',
            'Name': 'string',
            'Status': 'COMPLETE'|'COMPLETE_IMPORT_FAILED'|'IMPORTING'|'DELETING'|'UPDATING',
            'StatusMessage': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Id** *(string) --* 

          The Id of the firewall domain list that DNS Firewall just updated.

          
        

        - **Name** *(string) --* 

          The name of the domain list. 

          
        

        - **Status** *(string) --* 

           

          
        

        - **StatusMessage** *(string) --* 

          Additional information about the status of the list, if available.

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_firewall_configs(**kwargs)

    

    Retrieves the firewall configurations that you have defined. DNS Firewall uses the configurations to manage firewall behavior for your VPCs. 

     

    A single call might return only a partial list of the configurations. For information, see ``MaxResults`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallConfigs>`_    


    **Request Syntax** 
    ::

      response = client.list_firewall_configs(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of objects that you want Resolver to return for this request. If more objects are available, in the response, Resolver provides a ``NextToken`` value that you can use in a subsequent call to get the next batch of objects.

       

      If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 objects. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first call to this list request, omit this value.

       

      When you request a list of objects, Resolver returns at most the number of objects specified in ``MaxResults`` . If more objects are available for retrieval, Resolver returns a ``NextToken`` value in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'FirewallConfigs': [
                {
                    'Id': 'string',
                    'ResourceId': 'string',
                    'OwnerId': 'string',
                    'FirewallFailOpen': 'ENABLED'|'DISABLED'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If objects are still available for retrieval, Resolver returns this token in the response. To retrieve the next batch of objects, provide this token in your next request.

          
        

        - **FirewallConfigs** *(list) --* 

          The configurations for the firewall behavior provided by DNS Firewall for VPCs from Amazon Virtual Private Cloud (Amazon VPC). 

          
          

          - *(dict) --* 

            Configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 

            
            

            - **Id** *(string) --* 

              The ID of the firewall configuration.

              
            

            - **ResourceId** *(string) --* 

              The ID of the VPC that this firewall configuration applies to.

              
            

            - **OwnerId** *(string) --* 

              The AWS account ID of the owner of the VPC that this firewall configuration applies to.

              
            

            - **FirewallFailOpen** *(string) --* 

              Determines how DNS Firewall operates during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. 

               

               
              * By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall returns a failure error when it is unable to properly evaluate a query.  
               
              * If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them.  
               

               

              This behavior is only enforced for VPCs that have at least one DNS Firewall rule group association. 

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_firewall_domain_lists(**kwargs)

    

    Retrieves the firewall domain lists that you have defined. For each firewall domain list, you can retrieve the domains that are defined for a list by calling  ListFirewallDomains . 

     

    A single call to this list operation might return only a partial list of the domain lists. For information, see ``MaxResults`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallDomainLists>`_    


    **Request Syntax** 
    ::

      response = client.list_firewall_domain_lists(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of objects that you want Resolver to return for this request. If more objects are available, in the response, Resolver provides a ``NextToken`` value that you can use in a subsequent call to get the next batch of objects.

       

      If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 objects. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first call to this list request, omit this value.

       

      When you request a list of objects, Resolver returns at most the number of objects specified in ``MaxResults`` . If more objects are available for retrieval, Resolver returns a ``NextToken`` value in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'FirewallDomainLists': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'CreatorRequestId': 'string',
                    'ManagedOwnerName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If objects are still available for retrieval, Resolver returns this token in the response. To retrieve the next batch of objects, provide this token in your next request.

          
        

        - **FirewallDomainLists** *(list) --* 

          A list of the domain lists that you have defined. 

           

          This might be a partial list of the domain lists that you've defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            Minimal high-level information for a firewall domain list. The action  ListFirewallDomainLists returns an array of these objects. 

             

            To retrieve full information for a firewall domain list, call  GetFirewallDomainList and  ListFirewallDomains .

            
            

            - **Id** *(string) --* 

              The ID of the domain list. 

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the firewall domain list metadata.

              
            

            - **Name** *(string) --* 

              The name of the domain list. 

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **ManagedOwnerName** *(string) --* 

              The owner of the list, used only for lists that are not managed by you. For example, the managed domain list ``AWSManagedDomainsMalwareDomainList`` has the managed owner name ``Route 53 Resolver DNS Firewall`` .

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_firewall_domains(**kwargs)

    

    Retrieves the domains that you have defined for the specified firewall domain list. 

     

    A single call might return only a partial list of the domains. For information, see ``MaxResults`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallDomains>`_    


    **Request Syntax** 
    ::

      response = client.list_firewall_domains(
          FirewallDomainListId='string',
          MaxResults=123,
          NextToken='string'
      )
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list whose domains you want to retrieve. 

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of objects that you want Resolver to return for this request. If more objects are available, in the response, Resolver provides a ``NextToken`` value that you can use in a subsequent call to get the next batch of objects.

       

      If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 objects. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first call to this list request, omit this value.

       

      When you request a list of objects, Resolver returns at most the number of objects specified in ``MaxResults`` . If more objects are available for retrieval, Resolver returns a ``NextToken`` value in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Domains': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If objects are still available for retrieval, Resolver returns this token in the response. To retrieve the next batch of objects, provide this token in your next request.

          
        

        - **Domains** *(list) --* 

          A list of the domains in the firewall domain list. 

           

          This might be a partial list of the domains that you've defined in the domain list. For information, see ``MaxResults`` . 

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_firewall_rule_group_associations(**kwargs)

    

    Retrieves the firewall rule group associations that you have defined. Each association enables DNS filtering for a VPC with one rule group. 

     

    A single call might return only a partial list of the associations. For information, see ``MaxResults`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallRuleGroupAssociations>`_    


    **Request Syntax** 
    ::

      response = client.list_firewall_rule_group_associations(
          FirewallRuleGroupId='string',
          VpcId='string',
          Priority=123,
          Status='COMPLETE'|'DELETING'|'UPDATING',
          MaxResults=123,
          NextToken='string'
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: 

      The unique identifier of the firewall rule group that you want to retrieve the associations for. Leave this blank to retrieve associations for any rule group. 

      

    
    :type VpcId: string
    :param VpcId: 

      The unique identifier of the VPC that you want to retrieve the associations for. Leave this blank to retrieve associations for any VPC. 

      

    
    :type Priority: integer
    :param Priority: 

      The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. 

      

    
    :type Status: string
    :param Status: 

      The association ``Status`` setting that you want DNS Firewall to filter on for the list. If you don't specify this, then DNS Firewall returns all associations, regardless of status.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of objects that you want Resolver to return for this request. If more objects are available, in the response, Resolver provides a ``NextToken`` value that you can use in a subsequent call to get the next batch of objects.

       

      If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 objects. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first call to this list request, omit this value.

       

      When you request a list of objects, Resolver returns at most the number of objects specified in ``MaxResults`` . If more objects are available for retrieval, Resolver returns a ``NextToken`` value in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'FirewallRuleGroupAssociations': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'FirewallRuleGroupId': 'string',
                    'VpcId': 'string',
                    'Name': 'string',
                    'Priority': 123,
                    'MutationProtection': 'ENABLED'|'DISABLED',
                    'ManagedOwnerName': 'string',
                    'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                    'StatusMessage': 'string',
                    'CreatorRequestId': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If objects are still available for retrieval, Resolver returns this token in the response. To retrieve the next batch of objects, provide this token in your next request.

          
        

        - **FirewallRuleGroupAssociations** *(list) --* 

          A list of your firewall rule group associations.

           

          This might be a partial list of the associations that you have defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            An association between a firewall rule group and a VPC, which enables DNS filtering for the VPC. 

            
            

            - **Id** *(string) --* 

              The identifier for the association.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the firewall rule group association.

              
            

            - **FirewallRuleGroupId** *(string) --* 

              The unique identifier of the firewall rule group. 

              
            

            - **VpcId** *(string) --* 

              The unique identifier of the VPC that is associated with the rule group. 

              
            

            - **Name** *(string) --* 

              The name of the association.

              
            

            - **Priority** *(integer) --* 

              The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from rule group with the lowest numeric priority setting. 

              
            

            - **MutationProtection** *(string) --* 

              If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

              
            

            - **ManagedOwnerName** *(string) --* 

              The owner of the association, used only for associations that are not managed by you. If you use AWS Firewall Manager to manage your DNS Firewalls, then this reports Firewall Manager as the managed owner.

              
            

            - **Status** *(string) --* 

              The current status of the association.

              
            

            - **StatusMessage** *(string) --* 

              Additional information about the status of the response, if available.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **CreationTime** *(string) --* 

              The date and time that the association was created, in Unix time format and Coordinated Universal Time (UTC). 

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the association was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_firewall_rule_groups(**kwargs)

    

    Retrieves the minimal high-level information for the rule groups that you have defined. 

     

    A single call might return only a partial list of the rule groups. For information, see ``MaxResults`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallRuleGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_firewall_rule_groups(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of objects that you want Resolver to return for this request. If more objects are available, in the response, Resolver provides a ``NextToken`` value that you can use in a subsequent call to get the next batch of objects.

       

      If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 objects. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first call to this list request, omit this value.

       

      When you request a list of objects, Resolver returns at most the number of objects specified in ``MaxResults`` . If more objects are available for retrieval, Resolver returns a ``NextToken`` value in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'FirewallRuleGroups': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'OwnerId': 'string',
                    'CreatorRequestId': 'string',
                    'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If objects are still available for retrieval, Resolver returns this token in the response. To retrieve the next batch of objects, provide this token in your next request.

          
        

        - **FirewallRuleGroups** *(list) --* 

          A list of your firewall rule groups.

           

          This might be a partial list of the rule groups that you have defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            Minimal high-level information for a firewall rule group. The action  ListFirewallRuleGroups returns an array of these objects. 

             

            To retrieve full information for a firewall rule group, call  GetFirewallRuleGroup and  ListFirewallRules .

            
            

            - **Id** *(string) --* 

              The ID of the rule group. 

              
            

            - **Arn** *(string) --* 

              The ARN (Amazon Resource Name) of the rule group.

              
            

            - **Name** *(string) --* 

              The name of the rule group.

              
            

            - **OwnerId** *(string) --* 

              The AWS account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. 

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **ShareStatus** *(string) --* 

              Whether the rule group is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_firewall_rules(**kwargs)

    

    Retrieves the firewall rules that you have defined for the specified firewall rule group. DNS Firewall uses the rules in a rule group to filter DNS network traffic for a VPC. 

     

    A single call might return only a partial list of the rules. For information, see ``MaxResults`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallRules>`_    


    **Request Syntax** 
    ::

      response = client.list_firewall_rules(
          FirewallRuleGroupId='string',
          Priority=123,
          Action='ALLOW'|'BLOCK'|'ALERT',
          MaxResults=123,
          NextToken='string'
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group that you want to retrieve the rules for. 

      

    
    :type Priority: integer
    :param Priority: 

      Optional additional filter for the rules to retrieve.

       

      The setting that determines the processing order of the rules in a rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

      

    
    :type Action: string
    :param Action: 

      Optional additional filter for the rules to retrieve.

       

      The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

       

       
      * ``ALLOW`` - Permit the request to go through. 
       
      * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
       
      * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
       

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of objects that you want Resolver to return for this request. If more objects are available, in the response, Resolver provides a ``NextToken`` value that you can use in a subsequent call to get the next batch of objects.

       

      If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 objects. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first call to this list request, omit this value.

       

      When you request a list of objects, Resolver returns at most the number of objects specified in ``MaxResults`` . If more objects are available for retrieval, Resolver returns a ``NextToken`` value in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'FirewallRules': [
                {
                    'FirewallRuleGroupId': 'string',
                    'FirewallDomainListId': 'string',
                    'Name': 'string',
                    'Priority': 123,
                    'Action': 'ALLOW'|'BLOCK'|'ALERT',
                    'BlockResponse': 'NODATA'|'NXDOMAIN'|'OVERRIDE',
                    'BlockOverrideDomain': 'string',
                    'BlockOverrideDnsType': 'CNAME',
                    'BlockOverrideTtl': 123,
                    'CreatorRequestId': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If objects are still available for retrieval, Resolver returns this token in the response. To retrieve the next batch of objects, provide this token in your next request.

          
        

        - **FirewallRules** *(list) --* 

          A list of the rules that you have defined. 

           

          This might be a partial list of the firewall rules that you've defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            A single firewall rule in a rule group.

            
            

            - **FirewallRuleGroupId** *(string) --* 

              The unique identifier of the firewall rule group of the rule. 

              
            

            - **FirewallDomainListId** *(string) --* 

              The ID of the domain list that's used in the rule. 

              
            

            - **Name** *(string) --* 

              The name of the rule. 

              
            

            - **Priority** *(integer) --* 

              The priority of the rule in the rule group. This value must be unique within the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

              
            

            - **Action** *(string) --* 

              The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

               

               
              * ``ALLOW`` - Permit the request to go through. 
               
              * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
               
              * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
               

              
            

            - **BlockResponse** *(string) --* 

              The way that you want DNS Firewall to block the request. Used for the rule action setting ``BLOCK`` .

               

               
              * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
               
              * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
               
              * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
               

              
            

            - **BlockOverrideDomain** *(string) --* 

              The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

              
            

            - **BlockOverrideDnsType** *(string) --* 

              The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

              
            

            - **BlockOverrideTtl** *(integer) --* 

              The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of executing the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **CreationTime** *(string) --* 

              The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC). 

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_resolver_dnssec_configs(**kwargs)

    

    Lists the configurations for DNSSEC validation that are associated with the current AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverDnssecConfigs>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_dnssec_configs(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ]
      )
    :type MaxResults: integer
    :param MaxResults: 

       *Optional* : An integer that specifies the maximum number of DNSSEC configuration results that you want Amazon Route 53 to return. If you don't specify a value for ``MaxResults`` , Route 53 returns up to 100 configuration per page.

      

    
    :type NextToken: string
    :param NextToken: 

      (Optional) If the current AWS account has more than ``MaxResults`` DNSSEC configurations, use ``NextToken`` to get the second and subsequent pages of results.

       

      For the first ``ListResolverDnssecConfigs`` request, omit this value.

       

      For the second and subsequent requests, get the value of ``NextToken`` from the previous response and specify that value for ``NextToken`` in the request.

      

    
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of objects.

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'ResolverDnssecConfigs': [
                {
                    'Id': 'string',
                    'OwnerId': 'string',
                    'ResourceId': 'string',
                    'ValidationStatus': 'ENABLING'|'ENABLED'|'DISABLING'|'DISABLED'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If a response includes the last of the DNSSEC configurations that are associated with the current AWS account, ``NextToken`` doesn't appear in the response.

           

          If a response doesn't include the last of the configurations, you can get more configurations by submitting another `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListResolverDnssecConfigs.html>`__ request. Get the value of ``NextToken`` that Amazon Route 53 returned in the previous response and include it in ``NextToken`` in the next request.

          
        

        - **ResolverDnssecConfigs** *(list) --* 

          An array that contains one `ResolverDnssecConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_ResolverDnssecConfig.html>`__ element for each configuration for DNSSEC validation that is associated with the current AWS account.

          
          

          - *(dict) --* 

            A complex type that contains information about a configuration for DNSSEC validation.

            
            

            - **Id** *(string) --* 

              The ID for a configuration for DNSSEC validation.

              
            

            - **OwnerId** *(string) --* 

              The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.

              
            

            - **ResourceId** *(string) --* 

              The ID of the virtual private cloud (VPC) that you're configuring the DNSSEC validation status for.

              
            

            - **ValidationStatus** *(string) --* 

              The validation status for a DNSSEC configuration. The status can be one of the following:

               

               
              * **ENABLING:** DNSSEC validation is being enabled but is not complete. 
               
              * **ENABLED:** DNSSEC validation is enabled. 
               
              * **DISABLING:** DNSSEC validation is being disabled but is not complete. 
               
              * **DISABLED** DNSSEC validation is disabled. 
               

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: list_resolver_endpoint_ip_addresses(**kwargs)

    

    Gets the IP addresses for a specified Resolver endpoint.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverEndpointIpAddresses>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_endpoint_ip_addresses(
          ResolverEndpointId='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to get IP addresses for.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of IP addresses that you want to return in the response to a ``ListResolverEndpointIpAddresses`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 IP addresses. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListResolverEndpointIpAddresses`` request, omit this value.

       

      If the specified Resolver endpoint has more than ``MaxResults`` IP addresses, you can submit another ``ListResolverEndpointIpAddresses`` request to get the next group of IP addresses. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'MaxResults': 123,
            'IpAddresses': [
                {
                    'IpId': 'string',
                    'SubnetId': 'string',
                    'Ip': 'string',
                    'Status': 'CREATING'|'FAILED_CREATION'|'ATTACHING'|'ATTACHED'|'REMAP_DETACHING'|'REMAP_ATTACHING'|'DETACHING'|'FAILED_RESOURCE_GONE'|'DELETING'|'DELETE_FAILED_FAS_EXPIRED',
                    'StatusMessage': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If the specified endpoint has more than ``MaxResults`` IP addresses, you can submit another ``ListResolverEndpointIpAddresses`` request to get the next group of IP addresses. In the next request, specify the value of ``NextToken`` from the previous response. 

          
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **IpAddresses** *(list) --* 

          Information about the IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints).

          
          

          - *(dict) --* 

            In the response to a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, information about the IP addresses that the Resolver endpoint uses for DNS queries.

            
            

            - **IpId** *(string) --* 

              The ID of one IP address.

              
            

            - **SubnetId** *(string) --* 

              The ID of one subnet.

              
            

            - **Ip** *(string) --* 

              One IP address that the Resolver endpoint uses for DNS queries.

              
            

            - **Status** *(string) --* 

              A status code that gives the current status of the request.

              
            

            - **StatusMessage** *(string) --* 

              A message that provides additional information about the status of the request.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the IP address was created, in Unix time format and Coordinated Universal Time (UTC).

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the IP address was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_resolver_endpoints(**kwargs)

    

    Lists all the Resolver endpoints that were created using the current AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverEndpoints>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_endpoints(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ]
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of Resolver endpoints that you want to return in the response to a ``ListResolverEndpoints`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 Resolver endpoints. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListResolverEndpoints`` request, omit this value.

       

      If you have more than ``MaxResults`` Resolver endpoints, you can submit another ``ListResolverEndpoints`` request to get the next group of Resolver endpoints. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of Resolver endpoints, such as all inbound Resolver endpoints.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverEndpoints`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'MaxResults': 123,
            'ResolverEndpoints': [
                {
                    'Id': 'string',
                    'CreatorRequestId': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'SecurityGroupIds': [
                        'string',
                    ],
                    'Direction': 'INBOUND'|'OUTBOUND',
                    'IpAddressCount': 123,
                    'HostVPCId': 'string',
                    'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                    'StatusMessage': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If more than ``MaxResults`` IP addresses match the specified criteria, you can submit another ``ListResolverEndpoint`` request to get the next group of results. In the next request, specify the value of ``NextToken`` from the previous response. 

          
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **ResolverEndpoints** *(list) --* 

          The Resolver endpoints that were created by using the current AWS account, and that match the specified filters, if any.

          
          

          - *(dict) --* 

            In the response to a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ , `DeleteResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverEndpoint.html>`__ , `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ , `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , or `UpdateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_UpdateResolverEndpoint.html>`__ request, a complex type that contains settings for an existing inbound or outbound Resolver endpoint.

            
            

            - **Id** *(string) --* 

              The ID of the Resolver endpoint.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

              
            

            - **Arn** *(string) --* 

              The ARN (Amazon Resource Name) for the Resolver endpoint.

              
            

            - **Name** *(string) --* 

              The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

              
            

            - **SecurityGroupIds** *(list) --* 

              The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

              
              

              - *(string) --* 
          
            

            - **Direction** *(string) --* 

              Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

               

               
              * ``INBOUND`` : allows DNS queries to your VPC from your network 
               
              * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
               

              
            

            - **IpAddressCount** *(integer) --* 

              The number of IP addresses that the Resolver endpoint can use for DNS queries.

              
            

            - **HostVPCId** *(string) --* 

              The ID of the VPC that you want to create the Resolver endpoint in.

              
            

            - **Status** *(string) --* 

              A code that specifies the current status of the Resolver endpoint. Valid values include the following:

               

               
              * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
               
              * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
               
              * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
               
              * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
               
              * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

                 
                * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
                 
                * The network interface couldn't be created for some reason that's outside the control of Resolver. 
                 

               
               
              * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
               

              
            

            - **StatusMessage** *(string) --* 

              A detailed description of the status of the Resolver endpoint.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_resolver_query_log_config_associations(**kwargs)

    

    Lists information about associations between Amazon VPCs and query logging configurations.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverQueryLogConfigAssociations>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_query_log_config_associations(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          SortBy='string',
          SortOrder='ASCENDING'|'DESCENDING'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of query logging associations that you want to return in the response to a ``ListResolverQueryLogConfigAssociations`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 query logging associations. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListResolverQueryLogConfigAssociations`` request, omit this value.

       

      If there are more than ``MaxResults`` query logging associations that match the values that you specify for ``Filters`` , you can submit another ``ListResolverQueryLogConfigAssociations`` request to get the next group of associations. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of query logging associations.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigAssociations`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type SortBy: string
    :param SortBy: 

      The element that you want Resolver to sort query logging associations by. 

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigAssociations`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortBy`` , if any, as in the previous request.

         

       

      Valid values include the following elements:

       

       
      * ``CreationTime`` : The ID of the query logging association. 
       
      * ``Error`` : If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:  

         
        * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
         
        * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
         

       

      If ``Status`` is a value other than ``FAILED`` , ``ERROR`` is null.

       
       
      * ``Id`` : The ID of the query logging association 
       
      * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration 
       
      * ``ResourceId`` : The ID of the VPC that is associated with the query logging configuration 
       
      * ``Status`` : The current status of the configuration. Valid values include the following: 

         
        * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
         
        * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
         
        * ``DELETING`` : Resolver is deleting this query logging association. 
         
        * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. Here are two common causes: 

           
          * The specified destination (for example, an Amazon S3 bucket) was deleted. 
           
          * Permissions don't allow sending logs to the destination. 
           

         
         

       
       

      

    
    :type SortOrder: string
    :param SortOrder: 

      If you specified a value for ``SortBy`` , the order that you want query logging associations to be listed in, ``ASCENDING`` or ``DESCENDING`` .

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigAssociations`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortOrder`` , if any, as in the previous request.

         

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'TotalCount': 123,
            'TotalFilteredCount': 123,
            'ResolverQueryLogConfigAssociations': [
                {
                    'Id': 'string',
                    'ResolverQueryLogConfigId': 'string',
                    'ResourceId': 'string',
                    'Status': 'CREATING'|'ACTIVE'|'ACTION_NEEDED'|'DELETING'|'FAILED',
                    'Error': 'NONE'|'DESTINATION_NOT_FOUND'|'ACCESS_DENIED'|'INTERNAL_SERVICE_ERROR',
                    'ErrorMessage': 'string',
                    'CreationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If there are more than ``MaxResults`` query logging associations, you can submit another ``ListResolverQueryLogConfigAssociations`` request to get the next group of associations. In the next request, specify the value of ``NextToken`` from the previous response. 

          
        

        - **TotalCount** *(integer) --* 

          The total number of query logging associations that were created by the current account in the specified Region. This count can differ from the number of associations that are returned in a ``ListResolverQueryLogConfigAssociations`` response, depending on the values that you specify in the request.

          
        

        - **TotalFilteredCount** *(integer) --* 

          The total number of query logging associations that were created by the current account in the specified Region and that match the filters that were specified in the ``ListResolverQueryLogConfigAssociations`` request. For the total number of associations that were created by the current account in the specified Region, see ``TotalCount`` .

          
        

        - **ResolverQueryLogConfigAssociations** *(list) --* 

          A list that contains one ``ResolverQueryLogConfigAssociations`` element for each query logging association that matches the values that you specified for ``Filter`` .

          
          

          - *(dict) --* 

            In the response to an `AssociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverQueryLogConfig.html>`__ , `DisassociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html>`__ , `GetResolverQueryLogConfigAssociation <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverQueryLogConfigAssociation.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ , request, a complex type that contains settings for a specified association between an Amazon VPC and a query logging configuration.

            
            

            - **Id** *(string) --* 

              The ID of the query logging association.

              
            

            - **ResolverQueryLogConfigId** *(string) --* 

              The ID of the query logging configuration that a VPC is associated with.

              
            

            - **ResourceId** *(string) --* 

              The ID of the Amazon VPC that is associated with the query logging configuration.

              
            

            - **Status** *(string) --* 

              The status of the specified query logging association. Valid values include the following:

               

               
              * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
               
              * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
               
              * ``DELETING`` : Resolver is deleting this query logging association. 
               
              * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. 
               

              
            

            - **Error** *(string) --* 

              If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:

               

               
              * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
               
              * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
               

               

              If the value of ``Status`` is a value other than ``FAILED`` , ``Error`` is null. 

              
            

            - **ErrorMessage** *(string) --* 

              Contains additional information about the error. If the value or ``Error`` is null, the value of ``ErrorMessage`` also is null.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: list_resolver_query_log_configs(**kwargs)

    

    Lists information about the specified query logging configurations. Each configuration defines where you want Resolver to save DNS query logs and specifies the VPCs that you want to log queries for.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverQueryLogConfigs>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_query_log_configs(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          SortBy='string',
          SortOrder='ASCENDING'|'DESCENDING'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of query logging configurations that you want to return in the response to a ``ListResolverQueryLogConfigs`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 query logging configurations. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListResolverQueryLogConfigs`` request, omit this value.

       

      If there are more than ``MaxResults`` query logging configurations that match the values that you specify for ``Filters`` , you can submit another ``ListResolverQueryLogConfigs`` request to get the next group of configurations. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of query logging configurations.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigs`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type SortBy: string
    :param SortBy: 

      The element that you want Resolver to sort query logging configurations by. 

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigs`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortBy`` , if any, as in the previous request.

         

       

      Valid values include the following elements:

       

       
      * ``Arn`` : The ARN of the query logging configuration 
       
      * ``AssociationCount`` : The number of VPCs that are associated with the specified configuration  
       
      * ``CreationTime`` : The date and time that Resolver returned when the configuration was created 
       
      * ``CreatorRequestId`` : The value that was specified for ``CreatorRequestId`` when the configuration was created 
       
      * ``DestinationArn`` : The location that logs are sent to 
       
      * ``Id`` : The ID of the configuration 
       
      * ``Name`` : The name of the configuration 
       
      * ``OwnerId`` : The AWS account number of the account that created the configuration 
       
      * ``ShareStatus`` : Whether the configuration is shared with other AWS accounts or shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM). 
       
      * ``Status`` : The current status of the configuration. Valid values include the following: 

         
        * ``CREATING`` : Resolver is creating the query logging configuration. 
         
        * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
         
        * ``DELETING`` : Resolver is deleting this query logging configuration. 
         
        * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging configuration. Here are two common causes: 

           
          * The specified destination (for example, an Amazon S3 bucket) was deleted. 
           
          * Permissions don't allow sending logs to the destination. 
           

         
         

       
       

      

    
    :type SortOrder: string
    :param SortOrder: 

      If you specified a value for ``SortBy`` , the order that you want query logging configurations to be listed in, ``ASCENDING`` or ``DESCENDING`` .

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigs`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortOrder`` , if any, as in the previous request.

         

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'TotalCount': 123,
            'TotalFilteredCount': 123,
            'ResolverQueryLogConfigs': [
                {
                    'Id': 'string',
                    'OwnerId': 'string',
                    'Status': 'CREATING'|'CREATED'|'DELETING'|'FAILED',
                    'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                    'AssociationCount': 123,
                    'Arn': 'string',
                    'Name': 'string',
                    'DestinationArn': 'string',
                    'CreatorRequestId': 'string',
                    'CreationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If there are more than ``MaxResults`` query logging configurations, you can submit another ``ListResolverQueryLogConfigs`` request to get the next group of configurations. In the next request, specify the value of ``NextToken`` from the previous response. 

          
        

        - **TotalCount** *(integer) --* 

          The total number of query logging configurations that were created by the current account in the specified Region. This count can differ from the number of query logging configurations that are returned in a ``ListResolverQueryLogConfigs`` response, depending on the values that you specify in the request.

          
        

        - **TotalFilteredCount** *(integer) --* 

          The total number of query logging configurations that were created by the current account in the specified Region and that match the filters that were specified in the ``ListResolverQueryLogConfigs`` request. For the total number of query logging configurations that were created by the current account in the specified Region, see ``TotalCount`` .

          
        

        - **ResolverQueryLogConfigs** *(list) --* 

          A list that contains one ``ResolverQueryLogConfig`` element for each query logging configuration that matches the values that you specified for ``Filter`` .

          
          

          - *(dict) --* 

            In the response to a `CreateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverQueryLogConfig.html>`__ , `DeleteResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverQueryLogConfig.html>`__ , `GetResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverQueryLogConfig.html>`__ , or `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ request, a complex type that contains settings for one query logging configuration.

            
            

            - **Id** *(string) --* 

              The ID for the query logging configuration.

              
            

            - **OwnerId** *(string) --* 

              The AWS account ID for the account that created the query logging configuration. 

              
            

            - **Status** *(string) --* 

              The status of the specified query logging configuration. Valid values include the following:

               

               
              * ``CREATING`` : Resolver is creating the query logging configuration. 
               
              * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
               
              * ``DELETING`` : Resolver is deleting this query logging configuration. 
               
              * ``FAILED`` : Resolver can't deliver logs to the location that is specified in the query logging configuration. Here are two common causes: 

                 
                * The specified destination (for example, an Amazon S3 bucket) was deleted. 
                 
                * Permissions don't allow sending logs to the destination. 
                 

               
               

              
            

            - **ShareStatus** *(string) --* 

              An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

              
            

            - **AssociationCount** *(integer) --* 

              The number of VPCs that are associated with the query logging configuration.

              
            

            - **Arn** *(string) --* 

              The ARN for the query logging configuration.

              
            

            - **Name** *(string) --* 

              The name of the query logging configuration. 

              
            

            - **DestinationArn** *(string) --* 

              The ARN of the resource that you want Resolver to send query logs: an Amazon S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string that identifies the request that created the query logging configuration. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: list_resolver_rule_associations(**kwargs)

    

    Lists the associations that were created between Resolver rules and VPCs using the current AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverRuleAssociations>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_rule_associations(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ]
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of rule associations that you want to return in the response to a ``ListResolverRuleAssociations`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 rule associations. 

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListResolverRuleAssociation`` request, omit this value.

       

      If you have more than ``MaxResults`` rule associations, you can submit another ``ListResolverRuleAssociation`` request to get the next group of rule associations. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of Resolver rules, such as Resolver rules that are associated with the same VPC ID.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverRuleAssociations`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'MaxResults': 123,
            'ResolverRuleAssociations': [
                {
                    'Id': 'string',
                    'ResolverRuleId': 'string',
                    'Name': 'string',
                    'VPCId': 'string',
                    'Status': 'CREATING'|'COMPLETE'|'DELETING'|'FAILED'|'OVERRIDDEN',
                    'StatusMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If more than ``MaxResults`` rule associations match the specified criteria, you can submit another ``ListResolverRuleAssociation`` request to get the next group of results. In the next request, specify the value of ``NextToken`` from the previous response. 

          
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **ResolverRuleAssociations** *(list) --* 

          The associations that were created between Resolver rules and VPCs using the current AWS account, and that match the specified filters, if any.

          
          

          - *(dict) --* 

            In the response to an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ , `DisassociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html>`__ , or `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ request, provides information about an association between a Resolver rule and a VPC. The association determines which DNS queries that originate in the VPC are forwarded to your network. 

            
            

            - **Id** *(string) --* 

              The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ request.

              
            

            - **ResolverRuleId** *(string) --* 

              The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId`` .

              
            

            - **Name** *(string) --* 

              The name of an association between a Resolver rule and a VPC.

              
            

            - **VPCId** *(string) --* 

              The ID of the VPC that you associated the Resolver rule with.

              
            

            - **Status** *(string) --* 

              A code that specifies the current status of the association between a Resolver rule and a VPC.

              
            

            - **StatusMessage** *(string) --* 

              A detailed description of the status of the association between a Resolver rule and a VPC.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_resolver_rules(**kwargs)

    

    Lists the Resolver rules that were created using the current AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverRules>`_    


    **Request Syntax** 
    ::

      response = client.list_resolver_rules(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ]
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of Resolver rules that you want to return in the response to a ``ListResolverRules`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 Resolver rules.

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListResolverRules`` request, omit this value.

       

      If you have more than ``MaxResults`` Resolver rules, you can submit another ``ListResolverRules`` request to get the next group of Resolver rules. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of Resolver rules, such as all Resolver rules that are associated with the same Resolver endpoint.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverRules`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'MaxResults': 123,
            'ResolverRules': [
                {
                    'Id': 'string',
                    'CreatorRequestId': 'string',
                    'Arn': 'string',
                    'DomainName': 'string',
                    'Status': 'COMPLETE'|'DELETING'|'UPDATING'|'FAILED',
                    'StatusMessage': 'string',
                    'RuleType': 'FORWARD'|'SYSTEM'|'RECURSIVE',
                    'Name': 'string',
                    'TargetIps': [
                        {
                            'Ip': 'string',
                            'Port': 123
                        },
                    ],
                    'ResolverEndpointId': 'string',
                    'OwnerId': 'string',
                    'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If more than ``MaxResults`` Resolver rules match the specified criteria, you can submit another ``ListResolverRules`` request to get the next group of results. In the next request, specify the value of ``NextToken`` from the previous response. 

          
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **ResolverRules** *(list) --* 

          The Resolver rules that were created using the current AWS account and that match the specified filters, if any.

          
          

          - *(dict) --* 

            For queries that originate in your VPC, detailed information about a Resolver rule, which specifies how to route DNS queries out of the VPC. The ``ResolverRule`` parameter appears in the response to a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ , `DeleteResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverRule.html>`__ , `GetResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRule.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , or `UpdateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_UpdateResolverRule.html>`__ request.

            
            

            - **Id** *(string) --* 

              The ID that Resolver assigned to the Resolver rule when you created it.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string that you specified when you created the Resolver rule. ``CreatorRequestId`` identifies the request and allows failed requests to be retried without the risk of running the operation twice. 

              
            

            - **Arn** *(string) --* 

              The ARN (Amazon Resource Name) for the Resolver rule specified by ``Id`` .

              
            

            - **DomainName** *(string) --* 

              DNS queries for this domain name are forwarded to the IP addresses that are specified in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).

              
            

            - **Status** *(string) --* 

              A code that specifies the current status of the Resolver rule.

              
            

            - **StatusMessage** *(string) --* 

              A detailed description of the status of a Resolver rule.

              
            

            - **RuleType** *(string) --* 

              When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

               

              When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

               

              For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

               

              Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

              
            

            - **Name** *(string) --* 

              The name for the Resolver rule, which you specified when you created the Resolver rule.

              
            

            - **TargetIps** *(list) --* 

              An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.

              
              

              - *(dict) --* 

                In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

                
                

                - **Ip** *(string) --* 

                  One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

                  
                

                - **Port** *(integer) --* 

                  The port at ``Ip`` that you want to forward DNS queries to.

                  
            
          
            

            - **ResolverEndpointId** *(string) --* 

              The ID of the endpoint that the rule is associated with.

              
            

            - **OwnerId** *(string) --* 

              When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.

              
            

            - **ShareStatus** *(string) --* 

              Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists the tags that you associated with the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the resource that you want to list tags for.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of tags that you want to return in the response to a ``ListTagsForResource`` request. If you don't specify a value for ``MaxResults`` , Resolver returns up to 100 tags.

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListTagsForResource`` request, omit this value.

       

      If you have more than ``MaxResults`` tags, you can submit another ``ListTagsForResource`` request to get the next group of tags for the resource. In the next request, specify the value of ``NextToken`` from the previous response. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          The tags that are associated with the resource that you specified in the ``ListTagsForResource`` request.

          
          

          - *(dict) --* 

            One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

            
            

            - **Key** *(string) --* 

              The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

              
            

            - **Value** *(string) --* 

              The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

              
        
      
        

        - **NextToken** *(string) --* 

          If more than ``MaxResults`` tags match the specified criteria, you can submit another ``ListTagsForResource`` request to get the next group of results. In the next request, specify the value of ``NextToken`` from the previous response. 

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: put_firewall_rule_group_policy(**kwargs)

    

    Attaches an AWS Identity and Access Management (AWS IAM) policy for sharing the rule group. You can use the policy to share the rule group using AWS Resource Access Manager (AWS RAM). 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/PutFirewallRuleGroupPolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_firewall_rule_group_policy(
          Arn='string',
          FirewallRuleGroupPolicy='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The ARN (Amazon Resource Name) for the rule group that you want to share.

      

    
    :type FirewallRuleGroupPolicy: string
    :param FirewallRuleGroupPolicy: **[REQUIRED]** 

      The AWS Identity and Access Management (AWS IAM) policy to attach to the rule group.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReturnValue': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReturnValue** *(boolean) --* 

          

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: put_resolver_query_log_config_policy(**kwargs)

    

    Specifies an AWS account that you want to share a query logging configuration with, the query logging configuration that you want to share, and the operations that you want the account to be able to perform on the configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/PutResolverQueryLogConfigPolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_resolver_query_log_config_policy(
          Arn='string',
          ResolverQueryLogConfigPolicy='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the account that you want to share rules with.

      

    
    :type ResolverQueryLogConfigPolicy: string
    :param ResolverQueryLogConfigPolicy: **[REQUIRED]** 

      An AWS Identity and Access Management policy statement that lists the query logging configurations that you want to share with another AWS account and the operations that you want the account to be able to perform. You can specify the following operations in the ``Actions`` section of the statement:

       

       
      * ``route53resolver:AssociateResolverQueryLogConfig``   
       
      * ``route53resolver:DisassociateResolverQueryLogConfig``   
       
      * ``route53resolver:ListResolverQueryLogConfigAssociations``   
       
      * ``route53resolver:ListResolverQueryLogConfigs``   
       

       

      In the ``Resource`` section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in ``Arn`` . 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReturnValue': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 

        The response to a ``PutResolverQueryLogConfigPolicy`` request.

        
        

        - **ReturnValue** *(boolean) --* 

          Whether the ``PutResolverQueryLogConfigPolicy`` request was successful.

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidPolicyDocument`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.UnknownResourceException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_resolver_rule_policy(**kwargs)

    

    Specifies an AWS rule that you want to share with another account, the account that you want to share the rule with, and the operations that you want the account to be able to perform on the rule.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/PutResolverRulePolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_resolver_rule_policy(
          Arn='string',
          ResolverRulePolicy='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the rule that you want to share with another account.

      

    
    :type ResolverRulePolicy: string
    :param ResolverRulePolicy: **[REQUIRED]** 

      An AWS Identity and Access Management policy statement that lists the rules that you want to share with another AWS account and the operations that you want the account to be able to perform. You can specify the following operations in the ``Action`` section of the statement:

       

       
      * ``route53resolver:GetResolverRule``   
       
      * ``route53resolver:AssociateResolverRule``   
       
      * ``route53resolver:DisassociateResolverRule``   
       
      * ``route53resolver:ListResolverRules``   
       
      * ``route53resolver:ListResolverRuleAssociations``   
       

       

      In the ``Resource`` section of the statement, specify the ARN for the rule that you want to share with another account. Specify the same ARN that you specified in ``Arn`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReturnValue': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 

        The response to a ``PutResolverRulePolicy`` request.

        
        

        - **ReturnValue** *(boolean) --* 

          Whether the ``PutResolverRulePolicy`` request was successful.

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidPolicyDocument`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.UnknownResourceException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds one or more tags to a specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceArn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the resource that you want to add tags to. To get the ARN for a resource, use the applicable ``Get`` or ``List`` command: 

       

       
      * `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__   
       
      * `GetResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRule.html>`__   
       
      * `GetResolverRuleAssociation <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRuleAssociation.html>`__   
       
      * `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__   
       
      * `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__   
       
      * `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__   
       

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      The tags that you want to add to the specified resource.

      

    
      - *(dict) --* 

        One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidTagException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes one or more tags from a specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceArn='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the resource that you want to remove tags from. To get the ARN for a resource, use the applicable ``Get`` or ``List`` command: 

       

       
      * `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__   
       
      * `GetResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRule.html>`__   
       
      * `GetResolverRuleAssociation <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRuleAssociation.html>`__   
       
      * `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__   
       
      * `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__   
       
      * `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__   
       

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      The tags that you want to remove to the specified resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_firewall_config(**kwargs)

    

    Updates the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateFirewallConfig>`_    


    **Request Syntax** 
    ::

      response = client.update_firewall_config(
          ResourceId='string',
          FirewallFailOpen='ENABLED'|'DISABLED'
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The ID of the VPC that the configuration is for.

      

    
    :type FirewallFailOpen: string
    :param FirewallFailOpen: **[REQUIRED]** 

      Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. 

       

       
      * By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly.  
       
      * If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them.  
       

       

      This behavior is only enforced for VPCs that have at least one DNS Firewall rule group association. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallConfig': {
                'Id': 'string',
                'ResourceId': 'string',
                'OwnerId': 'string',
                'FirewallFailOpen': 'ENABLED'|'DISABLED'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallConfig** *(dict) --* 

          Configuration of the firewall behavior provided by DNS Firewall for a single VPC. 

          
          

          - **Id** *(string) --* 

            The ID of the firewall configuration.

            
          

          - **ResourceId** *(string) --* 

            The ID of the VPC that this firewall configuration applies to.

            
          

          - **OwnerId** *(string) --* 

            The AWS account ID of the owner of the VPC that this firewall configuration applies to.

            
          

          - **FirewallFailOpen** *(string) --* 

            Determines how DNS Firewall operates during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. 

             

             
            * By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall returns a failure error when it is unable to properly evaluate a query.  
             
            * If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them.  
             

             

            This behavior is only enforced for VPCs that have at least one DNS Firewall rule group association. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_firewall_domains(**kwargs)

    

    Updates the firewall domain list from an array of domain specifications. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateFirewallDomains>`_    


    **Request Syntax** 
    ::

      response = client.update_firewall_domains(
          FirewallDomainListId='string',
          Operation='ADD'|'REMOVE'|'REPLACE',
          Domains=[
              'string',
          ]
      )
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list whose domains you want to update. 

      

    
    :type Operation: string
    :param Operation: **[REQUIRED]** 

      What you want DNS Firewall to do with the domains that you are providing: 

       

       
      * ``ADD`` - Add the domains to the ones that are already in the domain list.  
       
      * ``REMOVE`` - Search the domain list for the domains and remove them from the list. 
       
      * ``REPLACE`` - Update the domain list to exactly match the list that you are providing.  
       

      

    
    :type Domains: list
    :param Domains: **[REQUIRED]** 

      A list of domains to use in the update operation.

       

      Each domain specification in your domain list must satisfy the following requirements: 

       

       
      * It can optionally start with ``*`` (asterisk). 
       
      * With the exception of the optional starting asterisk, it must only contain the following characters: ``A-Z`` , ``a-z`` , ``0-9`` , ``-`` (hyphen). 
       
      * It must be from 1-255 characters in length.  
       

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Id': 'string',
            'Name': 'string',
            'Status': 'COMPLETE'|'COMPLETE_IMPORT_FAILED'|'IMPORTING'|'DELETING'|'UPDATING',
            'StatusMessage': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Id** *(string) --* 

          The ID of the firewall domain list that DNS Firewall just updated.

          
        

        - **Name** *(string) --* 

          The name of the domain list. 

          
        

        - **Status** *(string) --* 

           

          
        

        - **StatusMessage** *(string) --* 

          Additional information about the status of the list, if available.

          
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_firewall_rule(**kwargs)

    

    Updates the specified firewall rule. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateFirewallRule>`_    


    **Request Syntax** 
    ::

      response = client.update_firewall_rule(
          FirewallRuleGroupId='string',
          FirewallDomainListId='string',
          Priority=123,
          Action='ALLOW'|'BLOCK'|'ALERT',
          BlockResponse='NODATA'|'NXDOMAIN'|'OVERRIDE',
          BlockOverrideDomain='string',
          BlockOverrideDnsType='CNAME',
          BlockOverrideTtl=123,
          Name='string'
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group for the rule. 

      

    
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list to use in the rule. 

      

    
    :type Priority: integer
    :param Priority: 

      The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

       

      You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.

      

    
    :type Action: string
    :param Action: 

      The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

       

       
      * ``ALLOW`` - Permit the request to go through. 
       
      * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
       
      * ``BLOCK`` - Disallow the request. This option requires additional details in the rule's ``BlockResponse`` .  
       

      

    
    :type BlockResponse: string
    :param BlockResponse: 

      The way that you want DNS Firewall to block the request. Used for the rule action setting ``BLOCK`` .

       

       
      * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
       
      * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
       
      * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
       

      

    
    :type BlockOverrideDomain: string
    :param BlockOverrideDomain: 

      The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

      

    
    :type BlockOverrideDnsType: string
    :param BlockOverrideDnsType: 

      The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

      

    
    :type BlockOverrideTtl: integer
    :param BlockOverrideTtl: 

      The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

      

    
    :type Name: string
    :param Name: 

      The name of the rule.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRule': {
                'FirewallRuleGroupId': 'string',
                'FirewallDomainListId': 'string',
                'Name': 'string',
                'Priority': 123,
                'Action': 'ALLOW'|'BLOCK'|'ALERT',
                'BlockResponse': 'NODATA'|'NXDOMAIN'|'OVERRIDE',
                'BlockOverrideDomain': 'string',
                'BlockOverrideDnsType': 'CNAME',
                'BlockOverrideTtl': 123,
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRule** *(dict) --* 

          The firewall rule that you just updated. 

          
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group of the rule. 

            
          

          - **FirewallDomainListId** *(string) --* 

            The ID of the domain list that's used in the rule. 

            
          

          - **Name** *(string) --* 

            The name of the rule. 

            
          

          - **Priority** *(integer) --* 

            The priority of the rule in the rule group. This value must be unique within the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

            
          

          - **Action** *(string) --* 

            The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

             

             
            * ``ALLOW`` - Permit the request to go through. 
             
            * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
             
            * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
             

            
          

          - **BlockResponse** *(string) --* 

            The way that you want DNS Firewall to block the request. Used for the rule action setting ``BLOCK`` .

             

             
            * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
             
            * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
             
            * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
             

            
          

          - **BlockOverrideDomain** *(string) --* 

            The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **BlockOverrideDnsType** *(string) --* 

            The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **BlockOverrideTtl** *(integer) --* 

            The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of executing the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_firewall_rule_group_association(**kwargs)

    

    Changes the association of a  FirewallRuleGroup with a VPC. The association enables DNS filtering for the VPC. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateFirewallRuleGroupAssociation>`_    


    **Request Syntax** 
    ::

      response = client.update_firewall_rule_group_association(
          FirewallRuleGroupAssociationId='string',
          Priority=123,
          MutationProtection='ENABLED'|'DISABLED',
          Name='string'
      )
    :type FirewallRuleGroupAssociationId: string
    :param FirewallRuleGroupAssociationId: **[REQUIRED]** 

      The identifier of the  FirewallRuleGroupAssociation . 

      

    
    :type Priority: integer
    :param Priority: 

      The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. 

       

      You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.

      

    
    :type MutationProtection: string
    :param MutationProtection: 

      If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

      

    
    :type Name: string
    :param Name: 

      The name of the rule group association.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroupAssociation': {
                'Id': 'string',
                'Arn': 'string',
                'FirewallRuleGroupId': 'string',
                'VpcId': 'string',
                'Name': 'string',
                'Priority': 123,
                'MutationProtection': 'ENABLED'|'DISABLED',
                'ManagedOwnerName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                'StatusMessage': 'string',
                'CreatorRequestId': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroupAssociation** *(dict) --* 

          The association that you just updated. 

          
          

          - **Id** *(string) --* 

            The identifier for the association.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the firewall rule group association.

            
          

          - **FirewallRuleGroupId** *(string) --* 

            The unique identifier of the firewall rule group. 

            
          

          - **VpcId** *(string) --* 

            The unique identifier of the VPC that is associated with the rule group. 

            
          

          - **Name** *(string) --* 

            The name of the association.

            
          

          - **Priority** *(integer) --* 

            The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from rule group with the lowest numeric priority setting. 

            
          

          - **MutationProtection** *(string) --* 

            If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

            
          

          - **ManagedOwnerName** *(string) --* 

            The owner of the association, used only for associations that are not managed by you. If you use AWS Firewall Manager to manage your DNS Firewalls, then this reports Firewall Manager as the managed owner.

            
          

          - **Status** *(string) --* 

            The current status of the association.

            
          

          - **StatusMessage** *(string) --* 

            Additional information about the status of the response, if available.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

            
          

          - **CreationTime** *(string) --* 

            The date and time that the association was created, in Unix time format and Coordinated Universal Time (UTC). 

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the association was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ValidationException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ConflictException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_resolver_dnssec_config(**kwargs)

    

    Updates an existing DNSSEC validation configuration. If there is no existing DNSSEC validation configuration, one is created.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateResolverDnssecConfig>`_    


    **Request Syntax** 
    ::

      response = client.update_resolver_dnssec_config(
          ResourceId='string',
          Validation='ENABLE'|'DISABLE'
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.

      

    
    :type Validation: string
    :param Validation: **[REQUIRED]** 

      The new value that you are specifying for DNSSEC validation for the VPC. The value can be ``ENABLE`` or ``DISABLE`` . Be aware that it can take time for a validation status change to be completed.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverDNSSECConfig': {
                'Id': 'string',
                'OwnerId': 'string',
                'ResourceId': 'string',
                'ValidationStatus': 'ENABLING'|'ENABLED'|'DISABLING'|'DISABLED'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverDNSSECConfig** *(dict) --* 

          A complex type that contains settings for the specified DNSSEC configuration.

          
          

          - **Id** *(string) --* 

            The ID for a configuration for DNSSEC validation.

            
          

          - **OwnerId** *(string) --* 

            The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.

            
          

          - **ResourceId** *(string) --* 

            The ID of the virtual private cloud (VPC) that you're configuring the DNSSEC validation status for.

            
          

          - **ValidationStatus** *(string) --* 

            The validation status for a DNSSEC configuration. The status can be one of the following:

             

             
            * **ENABLING:** DNSSEC validation is being enabled but is not complete. 
             
            * **ENABLED:** DNSSEC validation is enabled. 
             
            * **DISABLING:** DNSSEC validation is being disabled but is not complete. 
             
            * **DISABLED** DNSSEC validation is disabled. 
             

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_resolver_endpoint(**kwargs)

    

    Updates the name of an inbound or an outbound Resolver endpoint. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateResolverEndpoint>`_    


    **Request Syntax** 
    ::

      response = client.update_resolver_endpoint(
          ResolverEndpointId='string',
          Name='string'
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to update.

      

    
    :type Name: string
    :param Name: 

      The name of the Resolver endpoint that you want to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverEndpoint': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'Name': 'string',
                'SecurityGroupIds': [
                    'string',
                ],
                'Direction': 'INBOUND'|'OUTBOUND',
                'IpAddressCount': 123,
                'HostVPCId': 'string',
                'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                'StatusMessage': 'string',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverEndpoint** *(dict) --* 

          The response to an ``UpdateResolverEndpoint`` request.

          
          

          - **Id** *(string) --* 

            The ID of the Resolver endpoint.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver endpoint.

            
          

          - **Name** *(string) --* 

            The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

            
          

          - **SecurityGroupIds** *(list) --* 

            The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

            
            

            - *(string) --* 
        
          

          - **Direction** *(string) --* 

            Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

             

             
            * ``INBOUND`` : allows DNS queries to your VPC from your network 
             
            * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
             

            
          

          - **IpAddressCount** *(integer) --* 

            The number of IP addresses that the Resolver endpoint can use for DNS queries.

            
          

          - **HostVPCId** *(string) --* 

            The ID of the VPC that you want to create the Resolver endpoint in.

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver endpoint. Valid values include the following:

             

             
            * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
             
            * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
             
            * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
             
            * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
             
            * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

               
              * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
               
              * The network interface couldn't be created for some reason that's outside the control of Resolver. 
               

             
             
            * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
             

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of the Resolver endpoint.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_resolver_rule(**kwargs)

    

    Updates settings for a specified Resolver rule. ``ResolverRuleId`` is required, and all other parameters are optional. If you don't specify a parameter, it retains its current value.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/UpdateResolverRule>`_    


    **Request Syntax** 
    ::

      response = client.update_resolver_rule(
          ResolverRuleId='string',
          Config={
              'Name': 'string',
              'TargetIps': [
                  {
                      'Ip': 'string',
                      'Port': 123
                  },
              ],
              'ResolverEndpointId': 'string'
          }
      )
    :type ResolverRuleId: string
    :param ResolverRuleId: **[REQUIRED]** 

      The ID of the Resolver rule that you want to update.

      

    
    :type Config: dict
    :param Config: **[REQUIRED]** 

      The new settings for the Resolver rule.

      

    
      - **Name** *(string) --* 

        The new name for the Resolver rule. The name that you specify appears in the Resolver dashboard in the Route 53 console. 

        

      
      - **TargetIps** *(list) --* 

        For DNS queries that originate in your VPC, the new IP addresses that you want to route outbound DNS queries to.

        

      
        - *(dict) --* 

          In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

          

        
          - **Ip** *(string) --* **[REQUIRED]** 

            One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

            

          
          - **Port** *(integer) --* 

            The port at ``Ip`` that you want to forward DNS queries to.

            

          
        
    
      - **ResolverEndpointId** *(string) --* 

        The ID of the new outbound Resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify in ``TargetIps`` .

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverRule': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Arn': 'string',
                'DomainName': 'string',
                'Status': 'COMPLETE'|'DELETING'|'UPDATING'|'FAILED',
                'StatusMessage': 'string',
                'RuleType': 'FORWARD'|'SYSTEM'|'RECURSIVE',
                'Name': 'string',
                'TargetIps': [
                    {
                        'Ip': 'string',
                        'Port': 123
                    },
                ],
                'ResolverEndpointId': 'string',
                'OwnerId': 'string',
                'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                'CreationTime': 'string',
                'ModificationTime': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverRule** *(dict) --* 

          The response to an ``UpdateResolverRule`` request.

          
          

          - **Id** *(string) --* 

            The ID that Resolver assigned to the Resolver rule when you created it.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that you specified when you created the Resolver rule. ``CreatorRequestId`` identifies the request and allows failed requests to be retried without the risk of running the operation twice. 

            
          

          - **Arn** *(string) --* 

            The ARN (Amazon Resource Name) for the Resolver rule specified by ``Id`` .

            
          

          - **DomainName** *(string) --* 

            DNS queries for this domain name are forwarded to the IP addresses that are specified in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).

            
          

          - **Status** *(string) --* 

            A code that specifies the current status of the Resolver rule.

            
          

          - **StatusMessage** *(string) --* 

            A detailed description of the status of a Resolver rule.

            
          

          - **RuleType** *(string) --* 

            When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

             

            When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

             

            For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

             

            Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

            
          

          - **Name** *(string) --* 

            The name for the Resolver rule, which you specified when you created the Resolver rule.

            
          

          - **TargetIps** *(list) --* 

            An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.

            
            

            - *(dict) --* 

              In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

              
              

              - **Ip** *(string) --* 

                One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

                
              

              - **Port** *(integer) --* 

                The port at ``Ip`` that you want to forward DNS queries to.

                
          
        
          

          - **ResolverEndpointId** *(string) --* 

            The ID of the endpoint that the rule is associated with.

            
          

          - **OwnerId** *(string) --* 

            When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.

            
          

          - **ShareStatus** *(string) --* 

            Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.

            
          

          - **CreationTime** *(string) --* 

            The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).

            
          

          - **ModificationTime** *(string) --* 

            The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).

            
      
    
    **Exceptions** 
    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.InternalServiceErrorException`

    
    *     :py:class:`Route53Resolver.Client.exceptions.ThrottlingException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`Route53Resolver.Paginator.ListFirewallConfigs`


* :py:class:`Route53Resolver.Paginator.ListFirewallDomainLists`


* :py:class:`Route53Resolver.Paginator.ListFirewallDomains`


* :py:class:`Route53Resolver.Paginator.ListFirewallRuleGroupAssociations`


* :py:class:`Route53Resolver.Paginator.ListFirewallRuleGroups`


* :py:class:`Route53Resolver.Paginator.ListFirewallRules`


* :py:class:`Route53Resolver.Paginator.ListResolverDnssecConfigs`


* :py:class:`Route53Resolver.Paginator.ListResolverEndpointIpAddresses`


* :py:class:`Route53Resolver.Paginator.ListResolverEndpoints`


* :py:class:`Route53Resolver.Paginator.ListResolverQueryLogConfigAssociations`


* :py:class:`Route53Resolver.Paginator.ListResolverQueryLogConfigs`


* :py:class:`Route53Resolver.Paginator.ListResolverRuleAssociations`


* :py:class:`Route53Resolver.Paginator.ListResolverRules`


* :py:class:`Route53Resolver.Paginator.ListTagsForResource`



.. py:class:: Route53Resolver.Paginator.ListFirewallConfigs

  ::

    
    paginator = client.get_paginator('list_firewall_configs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_firewall_configs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallConfigs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallConfigs': [
                {
                    'Id': 'string',
                    'ResourceId': 'string',
                    'OwnerId': 'string',
                    'FirewallFailOpen': 'ENABLED'|'DISABLED'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallConfigs** *(list) --* 

          The configurations for the firewall behavior provided by DNS Firewall for VPCs from Amazon Virtual Private Cloud (Amazon VPC). 

          
          

          - *(dict) --* 

            Configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 

            
            

            - **Id** *(string) --* 

              The ID of the firewall configuration.

              
            

            - **ResourceId** *(string) --* 

              The ID of the VPC that this firewall configuration applies to.

              
            

            - **OwnerId** *(string) --* 

              The AWS account ID of the owner of the VPC that this firewall configuration applies to.

              
            

            - **FirewallFailOpen** *(string) --* 

              Determines how DNS Firewall operates during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. 

               

               
              * By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall returns a failure error when it is unable to properly evaluate a query.  
               
              * If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them.  
               

               

              This behavior is only enforced for VPCs that have at least one DNS Firewall rule group association. 

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListFirewallDomainLists

  ::

    
    paginator = client.get_paginator('list_firewall_domain_lists')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_firewall_domain_lists`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallDomainLists>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallDomainLists': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'CreatorRequestId': 'string',
                    'ManagedOwnerName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallDomainLists** *(list) --* 

          A list of the domain lists that you have defined. 

           

          This might be a partial list of the domain lists that you've defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            Minimal high-level information for a firewall domain list. The action  ListFirewallDomainLists returns an array of these objects. 

             

            To retrieve full information for a firewall domain list, call  GetFirewallDomainList and  ListFirewallDomains .

            
            

            - **Id** *(string) --* 

              The ID of the domain list. 

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the firewall domain list metadata.

              
            

            - **Name** *(string) --* 

              The name of the domain list. 

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **ManagedOwnerName** *(string) --* 

              The owner of the list, used only for lists that are not managed by you. For example, the managed domain list ``AWSManagedDomainsMalwareDomainList`` has the managed owner name ``Route 53 Resolver DNS Firewall`` .

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListFirewallDomains

  ::

    
    paginator = client.get_paginator('list_firewall_domains')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_firewall_domains`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallDomains>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          FirewallDomainListId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type FirewallDomainListId: string
    :param FirewallDomainListId: **[REQUIRED]** 

      The ID of the domain list whose domains you want to retrieve. 

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Domains': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Domains** *(list) --* 

          A list of the domains in the firewall domain list. 

           

          This might be a partial list of the domains that you've defined in the domain list. For information, see ``MaxResults`` . 

          
          

          - *(string) --* 
      
    

.. py:class:: Route53Resolver.Paginator.ListFirewallRuleGroupAssociations

  ::

    
    paginator = client.get_paginator('list_firewall_rule_group_associations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_firewall_rule_group_associations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallRuleGroupAssociations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          FirewallRuleGroupId='string',
          VpcId='string',
          Priority=123,
          Status='COMPLETE'|'DELETING'|'UPDATING',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: 

      The unique identifier of the firewall rule group that you want to retrieve the associations for. Leave this blank to retrieve associations for any rule group. 

      

    
    :type VpcId: string
    :param VpcId: 

      The unique identifier of the VPC that you want to retrieve the associations for. Leave this blank to retrieve associations for any VPC. 

      

    
    :type Priority: integer
    :param Priority: 

      The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. 

      

    
    :type Status: string
    :param Status: 

      The association ``Status`` setting that you want DNS Firewall to filter on for the list. If you don't specify this, then DNS Firewall returns all associations, regardless of status.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroupAssociations': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'FirewallRuleGroupId': 'string',
                    'VpcId': 'string',
                    'Name': 'string',
                    'Priority': 123,
                    'MutationProtection': 'ENABLED'|'DISABLED',
                    'ManagedOwnerName': 'string',
                    'Status': 'COMPLETE'|'DELETING'|'UPDATING',
                    'StatusMessage': 'string',
                    'CreatorRequestId': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroupAssociations** *(list) --* 

          A list of your firewall rule group associations.

           

          This might be a partial list of the associations that you have defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            An association between a firewall rule group and a VPC, which enables DNS filtering for the VPC. 

            
            

            - **Id** *(string) --* 

              The identifier for the association.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the firewall rule group association.

              
            

            - **FirewallRuleGroupId** *(string) --* 

              The unique identifier of the firewall rule group. 

              
            

            - **VpcId** *(string) --* 

              The unique identifier of the VPC that is associated with the rule group. 

              
            

            - **Name** *(string) --* 

              The name of the association.

              
            

            - **Priority** *(integer) --* 

              The setting that determines the processing order of the rule group among the rule groups that are associated with a single VPC. DNS Firewall filters VPC traffic starting from rule group with the lowest numeric priority setting. 

              
            

            - **MutationProtection** *(string) --* 

              If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. 

              
            

            - **ManagedOwnerName** *(string) --* 

              The owner of the association, used only for associations that are not managed by you. If you use AWS Firewall Manager to manage your DNS Firewalls, then this reports Firewall Manager as the managed owner.

              
            

            - **Status** *(string) --* 

              The current status of the association.

              
            

            - **StatusMessage** *(string) --* 

              Additional information about the status of the response, if available.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **CreationTime** *(string) --* 

              The date and time that the association was created, in Unix time format and Coordinated Universal Time (UTC). 

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the association was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListFirewallRuleGroups

  ::

    
    paginator = client.get_paginator('list_firewall_rule_groups')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_firewall_rule_groups`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallRuleGroups>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRuleGroups': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'OwnerId': 'string',
                    'CreatorRequestId': 'string',
                    'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRuleGroups** *(list) --* 

          A list of your firewall rule groups.

           

          This might be a partial list of the rule groups that you have defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            Minimal high-level information for a firewall rule group. The action  ListFirewallRuleGroups returns an array of these objects. 

             

            To retrieve full information for a firewall rule group, call  GetFirewallRuleGroup and  ListFirewallRules .

            
            

            - **Id** *(string) --* 

              The ID of the rule group. 

              
            

            - **Arn** *(string) --* 

              The ARN (Amazon Resource Name) of the rule group.

              
            

            - **Name** *(string) --* 

              The name of the rule group.

              
            

            - **OwnerId** *(string) --* 

              The AWS account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. 

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **ShareStatus** *(string) --* 

              Whether the rule group is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListFirewallRules

  ::

    
    paginator = client.get_paginator('list_firewall_rules')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_firewall_rules`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListFirewallRules>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          FirewallRuleGroupId='string',
          Priority=123,
          Action='ALLOW'|'BLOCK'|'ALERT',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type FirewallRuleGroupId: string
    :param FirewallRuleGroupId: **[REQUIRED]** 

      The unique identifier of the firewall rule group that you want to retrieve the rules for. 

      

    
    :type Priority: integer
    :param Priority: 

      Optional additional filter for the rules to retrieve.

       

      The setting that determines the processing order of the rules in a rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

      

    
    :type Action: string
    :param Action: 

      Optional additional filter for the rules to retrieve.

       

      The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

       

       
      * ``ALLOW`` - Permit the request to go through. 
       
      * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
       
      * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
       

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FirewallRules': [
                {
                    'FirewallRuleGroupId': 'string',
                    'FirewallDomainListId': 'string',
                    'Name': 'string',
                    'Priority': 123,
                    'Action': 'ALLOW'|'BLOCK'|'ALERT',
                    'BlockResponse': 'NODATA'|'NXDOMAIN'|'OVERRIDE',
                    'BlockOverrideDomain': 'string',
                    'BlockOverrideDnsType': 'CNAME',
                    'BlockOverrideTtl': 123,
                    'CreatorRequestId': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FirewallRules** *(list) --* 

          A list of the rules that you have defined. 

           

          This might be a partial list of the firewall rules that you've defined. For information, see ``MaxResults`` . 

          
          

          - *(dict) --* 

            A single firewall rule in a rule group.

            
            

            - **FirewallRuleGroupId** *(string) --* 

              The unique identifier of the firewall rule group of the rule. 

              
            

            - **FirewallDomainListId** *(string) --* 

              The ID of the domain list that's used in the rule. 

              
            

            - **Name** *(string) --* 

              The name of the rule. 

              
            

            - **Priority** *(integer) --* 

              The priority of the rule in the rule group. This value must be unique within the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.

              
            

            - **Action** *(string) --* 

              The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:

               

               
              * ``ALLOW`` - Permit the request to go through. 
               
              * ``ALERT`` - Permit the request to go through but send an alert to the logs. 
               
              * ``BLOCK`` - Disallow the request. If this is specified, additional handling details are provided in the rule's ``BlockResponse`` setting.  
               

              
            

            - **BlockResponse** *(string) --* 

              The way that you want DNS Firewall to block the request. Used for the rule action setting ``BLOCK`` .

               

               
              * ``NODATA`` - Respond indicating that the query was successful, but no response is available for it. 
               
              * ``NXDOMAIN`` - Respond indicating that the domain name that's in the query doesn't exist. 
               
              * ``OVERRIDE`` - Provide a custom override in the response. This option requires custom handling details in the rule's ``BlockOverride*`` settings.  
               

              
            

            - **BlockOverrideDomain** *(string) --* 

              The custom DNS record to send back in response to the query. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

              
            

            - **BlockOverrideDnsType** *(string) --* 

              The DNS record's type. This determines the format of the record value that you provided in ``BlockOverrideDomain`` . Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

              
            

            - **BlockOverrideTtl** *(integer) --* 

              The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action ``BLOCK`` with a ``BlockResponse`` setting of ``OVERRIDE`` .

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of executing the operation twice. This can be any unique string, for example, a timestamp. 

              
            

            - **CreationTime** *(string) --* 

              The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC). 

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverDnssecConfigs

  ::

    
    paginator = client.get_paginator('list_resolver_dnssec_configs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_dnssec_configs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverDnssecConfigs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of objects.

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResolverDnssecConfigs': [
                {
                    'Id': 'string',
                    'OwnerId': 'string',
                    'ResourceId': 'string',
                    'ValidationStatus': 'ENABLING'|'ENABLED'|'DISABLING'|'DISABLED'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResolverDnssecConfigs** *(list) --* 

          An array that contains one `ResolverDnssecConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_ResolverDnssecConfig.html>`__ element for each configuration for DNSSEC validation that is associated with the current AWS account.

          
          

          - *(dict) --* 

            A complex type that contains information about a configuration for DNSSEC validation.

            
            

            - **Id** *(string) --* 

              The ID for a configuration for DNSSEC validation.

              
            

            - **OwnerId** *(string) --* 

              The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.

              
            

            - **ResourceId** *(string) --* 

              The ID of the virtual private cloud (VPC) that you're configuring the DNSSEC validation status for.

              
            

            - **ValidationStatus** *(string) --* 

              The validation status for a DNSSEC configuration. The status can be one of the following:

               

               
              * **ENABLING:** DNSSEC validation is being enabled but is not complete. 
               
              * **ENABLED:** DNSSEC validation is enabled. 
               
              * **DISABLING:** DNSSEC validation is being disabled but is not complete. 
               
              * **DISABLED** DNSSEC validation is disabled. 
               

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverEndpointIpAddresses

  ::

    
    paginator = client.get_paginator('list_resolver_endpoint_ip_addresses')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_endpoint_ip_addresses`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverEndpointIpAddresses>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ResolverEndpointId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ResolverEndpointId: string
    :param ResolverEndpointId: **[REQUIRED]** 

      The ID of the Resolver endpoint that you want to get IP addresses for.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MaxResults': 123,
            'IpAddresses': [
                {
                    'IpId': 'string',
                    'SubnetId': 'string',
                    'Ip': 'string',
                    'Status': 'CREATING'|'FAILED_CREATION'|'ATTACHING'|'ATTACHED'|'REMAP_DETACHING'|'REMAP_ATTACHING'|'DETACHING'|'FAILED_RESOURCE_GONE'|'DELETING'|'DELETE_FAILED_FAS_EXPIRED',
                    'StatusMessage': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **IpAddresses** *(list) --* 

          Information about the IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints).

          
          

          - *(dict) --* 

            In the response to a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, information about the IP addresses that the Resolver endpoint uses for DNS queries.

            
            

            - **IpId** *(string) --* 

              The ID of one IP address.

              
            

            - **SubnetId** *(string) --* 

              The ID of one subnet.

              
            

            - **Ip** *(string) --* 

              One IP address that the Resolver endpoint uses for DNS queries.

              
            

            - **Status** *(string) --* 

              A status code that gives the current status of the request.

              
            

            - **StatusMessage** *(string) --* 

              A message that provides additional information about the status of the request.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the IP address was created, in Unix time format and Coordinated Universal Time (UTC).

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the IP address was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverEndpoints

  ::

    
    paginator = client.get_paginator('list_resolver_endpoints')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_endpoints`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverEndpoints>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of Resolver endpoints, such as all inbound Resolver endpoints.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverEndpoints`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MaxResults': 123,
            'ResolverEndpoints': [
                {
                    'Id': 'string',
                    'CreatorRequestId': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'SecurityGroupIds': [
                        'string',
                    ],
                    'Direction': 'INBOUND'|'OUTBOUND',
                    'IpAddressCount': 123,
                    'HostVPCId': 'string',
                    'Status': 'CREATING'|'OPERATIONAL'|'UPDATING'|'AUTO_RECOVERING'|'ACTION_NEEDED'|'DELETING',
                    'StatusMessage': 'string',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **ResolverEndpoints** *(list) --* 

          The Resolver endpoints that were created by using the current AWS account, and that match the specified filters, if any.

          
          

          - *(dict) --* 

            In the response to a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ , `DeleteResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverEndpoint.html>`__ , `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ , `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , or `UpdateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_UpdateResolverEndpoint.html>`__ request, a complex type that contains settings for an existing inbound or outbound Resolver endpoint.

            
            

            - **Id** *(string) --* 

              The ID of the Resolver endpoint.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string that identifies the request that created the Resolver endpoint. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

              
            

            - **Arn** *(string) --* 

              The ARN (Amazon Resource Name) for the Resolver endpoint.

              
            

            - **Name** *(string) --* 

              The name that you assigned to the Resolver endpoint when you submitted a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request.

              
            

            - **SecurityGroupIds** *(list) --* 

              The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.

              
              

              - *(string) --* 
          
            

            - **Direction** *(string) --* 

              Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:

               

               
              * ``INBOUND`` : allows DNS queries to your VPC from your network 
               
              * ``OUTBOUND`` : allows DNS queries from your VPC to your network 
               

              
            

            - **IpAddressCount** *(integer) --* 

              The number of IP addresses that the Resolver endpoint can use for DNS queries.

              
            

            - **HostVPCId** *(string) --* 

              The ID of the VPC that you want to create the Resolver endpoint in.

              
            

            - **Status** *(string) --* 

              A code that specifies the current status of the Resolver endpoint. Valid values include the following:

               

               
              * ``CREATING`` : Resolver is creating and configuring one or more Amazon VPC network interfaces for this endpoint. 
               
              * ``OPERATIONAL`` : The Amazon VPC network interfaces for this endpoint are correctly configured and able to pass inbound or outbound DNS queries between your network and Resolver. 
               
              * ``UPDATING`` : Resolver is associating or disassociating one or more network interfaces with this endpoint. 
               
              * ``AUTO_RECOVERING`` : Resolver is trying to recover one or more of the network interfaces that are associated with this endpoint. During the recovery process, the endpoint functions with limited capacity because of the limit on the number of DNS queries per IP address (per network interface). For the current limit, see `Limits on Route 53 Resolver <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver>`__ . 
               
              * ``ACTION_NEEDED`` : This endpoint is unhealthy, and Resolver can't automatically recover it. To resolve the problem, we recommend that you check each IP address that you associated with the endpoint. For each IP address that isn't available, add another IP address and then delete the IP address that isn't available. (An endpoint must always include at least two IP addresses.) A status of ``ACTION_NEEDED`` can have a variety of causes. Here are two common causes: 

                 
                * One or more of the network interfaces that are associated with the endpoint were deleted using Amazon VPC. 
                 
                * The network interface couldn't be created for some reason that's outside the control of Resolver. 
                 

               
               
              * ``DELETING`` : Resolver is deleting this endpoint and the associated network interfaces. 
               

              
            

            - **StatusMessage** *(string) --* 

              A detailed description of the status of the Resolver endpoint.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverQueryLogConfigAssociations

  ::

    
    paginator = client.get_paginator('list_resolver_query_log_config_associations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_query_log_config_associations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverQueryLogConfigAssociations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          SortBy='string',
          SortOrder='ASCENDING'|'DESCENDING',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of query logging associations.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigAssociations`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type SortBy: string
    :param SortBy: 

      The element that you want Resolver to sort query logging associations by. 

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigAssociations`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortBy`` , if any, as in the previous request.

         

       

      Valid values include the following elements:

       

       
      * ``CreationTime`` : The ID of the query logging association. 
       
      * ``Error`` : If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:  

         
        * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
         
        * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
         

       

      If ``Status`` is a value other than ``FAILED`` , ``ERROR`` is null.

       
       
      * ``Id`` : The ID of the query logging association 
       
      * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration 
       
      * ``ResourceId`` : The ID of the VPC that is associated with the query logging configuration 
       
      * ``Status`` : The current status of the configuration. Valid values include the following: 

         
        * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
         
        * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
         
        * ``DELETING`` : Resolver is deleting this query logging association. 
         
        * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. Here are two common causes: 

           
          * The specified destination (for example, an Amazon S3 bucket) was deleted. 
           
          * Permissions don't allow sending logs to the destination. 
           

         
         

       
       

      

    
    :type SortOrder: string
    :param SortOrder: 

      If you specified a value for ``SortBy`` , the order that you want query logging associations to be listed in, ``ASCENDING`` or ``DESCENDING`` .

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigAssociations`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortOrder`` , if any, as in the previous request.

         

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'TotalCount': 123,
            'TotalFilteredCount': 123,
            'ResolverQueryLogConfigAssociations': [
                {
                    'Id': 'string',
                    'ResolverQueryLogConfigId': 'string',
                    'ResourceId': 'string',
                    'Status': 'CREATING'|'ACTIVE'|'ACTION_NEEDED'|'DELETING'|'FAILED',
                    'Error': 'NONE'|'DESTINATION_NOT_FOUND'|'ACCESS_DENIED'|'INTERNAL_SERVICE_ERROR',
                    'ErrorMessage': 'string',
                    'CreationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **TotalCount** *(integer) --* 

          The total number of query logging associations that were created by the current account in the specified Region. This count can differ from the number of associations that are returned in a ``ListResolverQueryLogConfigAssociations`` response, depending on the values that you specify in the request.

          
        

        - **TotalFilteredCount** *(integer) --* 

          The total number of query logging associations that were created by the current account in the specified Region and that match the filters that were specified in the ``ListResolverQueryLogConfigAssociations`` request. For the total number of associations that were created by the current account in the specified Region, see ``TotalCount`` .

          
        

        - **ResolverQueryLogConfigAssociations** *(list) --* 

          A list that contains one ``ResolverQueryLogConfigAssociations`` element for each query logging association that matches the values that you specified for ``Filter`` .

          
          

          - *(dict) --* 

            In the response to an `AssociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverQueryLogConfig.html>`__ , `DisassociateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html>`__ , `GetResolverQueryLogConfigAssociation <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverQueryLogConfigAssociation.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ , request, a complex type that contains settings for a specified association between an Amazon VPC and a query logging configuration.

            
            

            - **Id** *(string) --* 

              The ID of the query logging association.

              
            

            - **ResolverQueryLogConfigId** *(string) --* 

              The ID of the query logging configuration that a VPC is associated with.

              
            

            - **ResourceId** *(string) --* 

              The ID of the Amazon VPC that is associated with the query logging configuration.

              
            

            - **Status** *(string) --* 

              The status of the specified query logging association. Valid values include the following:

               

               
              * ``CREATING`` : Resolver is creating an association between an Amazon VPC and a query logging configuration. 
               
              * ``CREATED`` : The association between an Amazon VPC and a query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
               
              * ``DELETING`` : Resolver is deleting this query logging association. 
               
              * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging association. 
               

              
            

            - **Error** *(string) --* 

              If the value of ``Status`` is ``FAILED`` , the value of ``Error`` indicates the cause:

               

               
              * ``DESTINATION_NOT_FOUND`` : The specified destination (for example, an Amazon S3 bucket) was deleted. 
               
              * ``ACCESS_DENIED`` : Permissions don't allow sending logs to the destination. 
               

               

              If the value of ``Status`` is a value other than ``FAILED`` , ``Error`` is null. 

              
            

            - **ErrorMessage** *(string) --* 

              Contains additional information about the error. If the value or ``Error`` is null, the value of ``ErrorMessage`` also is null.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverQueryLogConfigs

  ::

    
    paginator = client.get_paginator('list_resolver_query_log_configs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_query_log_configs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverQueryLogConfigs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          SortBy='string',
          SortOrder='ASCENDING'|'DESCENDING',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of query logging configurations.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigs`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type SortBy: string
    :param SortBy: 

      The element that you want Resolver to sort query logging configurations by. 

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigs`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortBy`` , if any, as in the previous request.

         

       

      Valid values include the following elements:

       

       
      * ``Arn`` : The ARN of the query logging configuration 
       
      * ``AssociationCount`` : The number of VPCs that are associated with the specified configuration  
       
      * ``CreationTime`` : The date and time that Resolver returned when the configuration was created 
       
      * ``CreatorRequestId`` : The value that was specified for ``CreatorRequestId`` when the configuration was created 
       
      * ``DestinationArn`` : The location that logs are sent to 
       
      * ``Id`` : The ID of the configuration 
       
      * ``Name`` : The name of the configuration 
       
      * ``OwnerId`` : The AWS account number of the account that created the configuration 
       
      * ``ShareStatus`` : Whether the configuration is shared with other AWS accounts or shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM). 
       
      * ``Status`` : The current status of the configuration. Valid values include the following: 

         
        * ``CREATING`` : Resolver is creating the query logging configuration. 
         
        * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
         
        * ``DELETING`` : Resolver is deleting this query logging configuration. 
         
        * ``FAILED`` : Resolver either couldn't create or couldn't delete the query logging configuration. Here are two common causes: 

           
          * The specified destination (for example, an Amazon S3 bucket) was deleted. 
           
          * Permissions don't allow sending logs to the destination. 
           

         
         

       
       

      

    
    :type SortOrder: string
    :param SortOrder: 

      If you specified a value for ``SortBy`` , the order that you want query logging configurations to be listed in, ``ASCENDING`` or ``DESCENDING`` .

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverQueryLogConfigs`` request and specify the ``NextToken`` parameter, you must use the same value for ``SortOrder`` , if any, as in the previous request.

         

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'TotalCount': 123,
            'TotalFilteredCount': 123,
            'ResolverQueryLogConfigs': [
                {
                    'Id': 'string',
                    'OwnerId': 'string',
                    'Status': 'CREATING'|'CREATED'|'DELETING'|'FAILED',
                    'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                    'AssociationCount': 123,
                    'Arn': 'string',
                    'Name': 'string',
                    'DestinationArn': 'string',
                    'CreatorRequestId': 'string',
                    'CreationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **TotalCount** *(integer) --* 

          The total number of query logging configurations that were created by the current account in the specified Region. This count can differ from the number of query logging configurations that are returned in a ``ListResolverQueryLogConfigs`` response, depending on the values that you specify in the request.

          
        

        - **TotalFilteredCount** *(integer) --* 

          The total number of query logging configurations that were created by the current account in the specified Region and that match the filters that were specified in the ``ListResolverQueryLogConfigs`` request. For the total number of query logging configurations that were created by the current account in the specified Region, see ``TotalCount`` .

          
        

        - **ResolverQueryLogConfigs** *(list) --* 

          A list that contains one ``ResolverQueryLogConfig`` element for each query logging configuration that matches the values that you specified for ``Filter`` .

          
          

          - *(dict) --* 

            In the response to a `CreateResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverQueryLogConfig.html>`__ , `DeleteResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverQueryLogConfig.html>`__ , `GetResolverQueryLogConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverQueryLogConfig.html>`__ , or `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ request, a complex type that contains settings for one query logging configuration.

            
            

            - **Id** *(string) --* 

              The ID for the query logging configuration.

              
            

            - **OwnerId** *(string) --* 

              The AWS account ID for the account that created the query logging configuration. 

              
            

            - **Status** *(string) --* 

              The status of the specified query logging configuration. Valid values include the following:

               

               
              * ``CREATING`` : Resolver is creating the query logging configuration. 
               
              * ``CREATED`` : The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC. 
               
              * ``DELETING`` : Resolver is deleting this query logging configuration. 
               
              * ``FAILED`` : Resolver can't deliver logs to the location that is specified in the query logging configuration. Here are two common causes: 

                 
                * The specified destination (for example, an Amazon S3 bucket) was deleted. 
                 
                * Permissions don't allow sending logs to the destination. 
                 

               
               

              
            

            - **ShareStatus** *(string) --* 

              An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM).

              
            

            - **AssociationCount** *(integer) --* 

              The number of VPCs that are associated with the query logging configuration.

              
            

            - **Arn** *(string) --* 

              The ARN for the query logging configuration.

              
            

            - **Name** *(string) --* 

              The name of the query logging configuration. 

              
            

            - **DestinationArn** *(string) --* 

              The ARN of the resource that you want Resolver to send query logs: an Amazon S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string that identifies the request that created the query logging configuration. The ``CreatorRequestId`` allows failed requests to be retried without the risk of running the operation twice.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverRuleAssociations

  ::

    
    paginator = client.get_paginator('list_resolver_rule_associations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_rule_associations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverRuleAssociations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of Resolver rules, such as Resolver rules that are associated with the same VPC ID.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverRuleAssociations`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MaxResults': 123,
            'ResolverRuleAssociations': [
                {
                    'Id': 'string',
                    'ResolverRuleId': 'string',
                    'Name': 'string',
                    'VPCId': 'string',
                    'Status': 'CREATING'|'COMPLETE'|'DELETING'|'FAILED'|'OVERRIDDEN',
                    'StatusMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **ResolverRuleAssociations** *(list) --* 

          The associations that were created between Resolver rules and VPCs using the current AWS account, and that match the specified filters, if any.

          
          

          - *(dict) --* 

            In the response to an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ , `DisassociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html>`__ , or `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ request, provides information about an association between a Resolver rule and a VPC. The association determines which DNS queries that originate in the VPC are forwarded to your network. 

            
            

            - **Id** *(string) --* 

              The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an `AssociateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html>`__ request.

              
            

            - **ResolverRuleId** *(string) --* 

              The ID of the Resolver rule that you associated with the VPC that is specified by ``VPCId`` .

              
            

            - **Name** *(string) --* 

              The name of an association between a Resolver rule and a VPC.

              
            

            - **VPCId** *(string) --* 

              The ID of the VPC that you associated the Resolver rule with.

              
            

            - **Status** *(string) --* 

              A code that specifies the current status of the association between a Resolver rule and a VPC.

              
            

            - **StatusMessage** *(string) --* 

              A detailed description of the status of the association between a Resolver rule and a VPC.

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListResolverRules

  ::

    
    paginator = client.get_paginator('list_resolver_rules')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_resolver_rules`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListResolverRules>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      An optional specification to return a subset of Resolver rules, such as all Resolver rules that are associated with the same Resolver endpoint.

       

      .. note::

         

        If you submit a second or subsequent ``ListResolverRules`` request and specify the ``NextToken`` parameter, you must use the same values for ``Filters`` , if any, as in the previous request.

         

      

    
      - *(dict) --* 

        For Resolver list operations (`ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ ), and `ListResolverDnssecConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverDnssecConfigs.html>`__ ), an optional specification to return a subset of objects.

         

        To filter objects, such as Resolver endpoints or Resolver rules, you specify ``Name`` and ``Values`` . For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` . 

        

      
        - **Name** *(string) --* 

          The name of the parameter that you want to use to filter objects.

           

          The valid values for ``Name`` depend on the action that you're including the filter in, `ListResolverEndpoints <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverEndpoints.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , `ListResolverRuleAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html>`__ , `ListResolverQueryLogConfigs <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigs.html>`__ , or `ListResolverQueryLogConfigAssociations <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverQueryLogConfigAssociations.html>`__ .

           

          .. note::

             

            In early versions of Resolver, values for ``Name`` were listed as uppercase, with underscore (_) delimiters. For example, ``CreatorRequestId`` was originally listed as ``CREATOR_REQUEST_ID`` . Uppercase values for ``Name`` are still supported.

             

           

           **ListResolverEndpoints**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver endpoint. 
           
          * ``Direction`` : Whether you want to return inbound or outbound Resolver endpoints. If you specify ``DIRECTION`` for ``Name`` , specify ``INBOUND`` or ``OUTBOUND`` for ``Values`` . 
           
          * ``HostVpcId`` : The ID of the VPC that inbound DNS queries pass through on the way from your network to your VPCs in a region, or the VPC that outbound queries pass through on the way from your VPCs to your network. In a `CreateResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html>`__ request, ``SubnetId`` indirectly identifies the VPC. In a `GetResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverEndpoint.html>`__ request, the VPC ID for a Resolver endpoint is returned in the ``HostVPCId`` element.  
           
          * ``IpAddressCount`` : The number of IP addresses that you have associated with the Resolver endpoint. 
           
          * ``Name`` : The name of the Resolver endpoint. 
           
          * ``SecurityGroupIds`` : The IDs of the VPC security groups that you specified when you created the Resolver endpoint. 
           
          * ``Status`` : The status of the Resolver endpoint. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``OPERATIONAL`` , ``UPDATING`` , ``AUTO_RECOVERING`` , ``ACTION_NEEDED`` , or ``DELETING`` . For more information, see ``Status`` in `ResolverEndpoint <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverEndpoint.html>`__ . 
           

           

           **ListResolverRules**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreatorRequestId`` : The value that you specified when you created the Resolver rule. 
           
          * ``DomainName`` : The domain name for which Resolver is forwarding DNS queries to your network. In the value that you specify for ``Values`` , include a trailing dot (.) after the domain name. For example, if the domain name is example.com, specify the following value. Note the "." after ``com`` :  ``example.com.``   
           
          * ``Name`` : The name of the Resolver rule. 
           
          * ``ResolverEndpointId`` : The ID of the Resolver endpoint that the Resolver rule is associated with. 

          .. note::

             You can filter on the Resolver endpoint only for rules that have a value of ``FORWARD`` for ``RuleType`` . 

           
           
          * ``Status`` : The status of the Resolver rule. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``COMPLETE`` , ``DELETING`` , ``UPDATING`` , or ``FAILED`` . 
           
          * ``Type`` : The type of the Resolver rule. If you specify ``TYPE`` for ``Name`` , specify ``FORWARD`` or ``SYSTEM`` for ``Values`` . 
           

           

           **ListResolverRuleAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Name`` : The name of the Resolver rule association. 
           
          * ``ResolverRuleId`` : The ID of the Resolver rule that is associated with one or more VPCs. 
           
          * ``Status`` : The status of the Resolver rule association. If you specify ``Status`` for ``Name`` , specify one of the following status codes for ``Values`` : ``CREATING`` , ``COMPLETE`` , ``DELETING`` , or ``FAILED`` . 
           
          * ``VPCId`` : The ID of the VPC that the Resolver rule is associated with. 
           

           

           **ListResolverQueryLogConfigs**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``Arn`` : The ARN for the query logging configuration. 
           
          * ``AssociationCount`` : The number of VPCs that are associated with the query logging configuration. 
           
          * ``CreationTime`` : The date and time that the query logging configuration was created, in Unix time format and Coordinated Universal Time (UTC).  
           
          * ``CreatorRequestId`` : A unique string that identifies the request that created the query logging configuration. 
           
          * ``Destination`` : The AWS service that you want to forward query logs to. Valid values include the following: 

             
            * ``S3``   
             
            * ``CloudWatchLogs``   
             
            * ``KinesisFirehose``   
             

           
           
          * ``DestinationArn`` : The ARN of the location that Resolver is sending query logs to. This value can be the ARN for an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. 
           
          * ``Id`` : The ID of the query logging configuration 
           
          * ``Name`` : The name of the query logging configuration 
           
          * ``OwnerId`` : The AWS account ID for the account that created the query logging configuration. 
           
          * ``ShareStatus`` : An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account. Valid values include: ``NOT_SHARED`` , ``SHARED_WITH_ME`` , or ``SHARED_BY_ME`` . 
           
          * ``Status`` : The status of the query logging configuration. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfig.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfig-Status>`__ .  
           

           

           **ListResolverQueryLogConfigAssociations**  

           

          Valid values for ``Name`` include the following:

           

           
          * ``CreationTime`` : The date and time that the VPC was associated with the query logging configuration, in Unix time format and Coordinated Universal Time (UTC). 
           
          * ``Error`` : If the value of ``Status`` is ``FAILED`` , specify the cause: ``DESTINATION_NOT_FOUND`` or ``ACCESS_DENIED`` . 
           
          * ``Id`` : The ID of the query logging association. 
           
          * ``ResolverQueryLogConfigId`` : The ID of the query logging configuration that a VPC is associated with. 
           
          * ``ResourceId`` : The ID of the Amazon VPC that is associated with the query logging configuration. 
           
          * ``Status`` : The status of the query logging association. If you specify ``Status`` for ``Name`` , specify the applicable status code for ``Values`` : ``CREATING`` , ``CREATED`` , ``DELETING`` , or ``FAILED`` . For more information, see `Status <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ResolverQueryLogConfigAssociation.html#Route53Resolver-Type-route53resolver_ResolverQueryLogConfigAssociation-Status>`__ .  
           

          

        
        - **Values** *(list) --* 

          When you're using a ``List`` operation and you want the operation to return a subset of objects, such as Resolver endpoints or Resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound Resolver endpoints, specify ``Direction`` for ``Name`` and specify ``INBOUND`` for ``Values`` .

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MaxResults': 123,
            'ResolverRules': [
                {
                    'Id': 'string',
                    'CreatorRequestId': 'string',
                    'Arn': 'string',
                    'DomainName': 'string',
                    'Status': 'COMPLETE'|'DELETING'|'UPDATING'|'FAILED',
                    'StatusMessage': 'string',
                    'RuleType': 'FORWARD'|'SYSTEM'|'RECURSIVE',
                    'Name': 'string',
                    'TargetIps': [
                        {
                            'Ip': 'string',
                            'Port': 123
                        },
                    ],
                    'ResolverEndpointId': 'string',
                    'OwnerId': 'string',
                    'ShareStatus': 'NOT_SHARED'|'SHARED_WITH_ME'|'SHARED_BY_ME',
                    'CreationTime': 'string',
                    'ModificationTime': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MaxResults** *(integer) --* 

          The value that you specified for ``MaxResults`` in the request.

          
        

        - **ResolverRules** *(list) --* 

          The Resolver rules that were created using the current AWS account and that match the specified filters, if any.

          
          

          - *(dict) --* 

            For queries that originate in your VPC, detailed information about a Resolver rule, which specifies how to route DNS queries out of the VPC. The ``ResolverRule`` parameter appears in the response to a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ , `DeleteResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverRule.html>`__ , `GetResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRule.html>`__ , `ListResolverRules <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html>`__ , or `UpdateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_UpdateResolverRule.html>`__ request.

            
            

            - **Id** *(string) --* 

              The ID that Resolver assigned to the Resolver rule when you created it.

              
            

            - **CreatorRequestId** *(string) --* 

              A unique string that you specified when you created the Resolver rule. ``CreatorRequestId`` identifies the request and allows failed requests to be retried without the risk of running the operation twice. 

              
            

            - **Arn** *(string) --* 

              The ARN (Amazon Resource Name) for the Resolver rule specified by ``Id`` .

              
            

            - **DomainName** *(string) --* 

              DNS queries for this domain name are forwarded to the IP addresses that are specified in ``TargetIps`` . If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).

              
            

            - **Status** *(string) --* 

              A code that specifies the current status of the Resolver rule.

              
            

            - **StatusMessage** *(string) --* 

              A detailed description of the status of a Resolver rule.

              
            

            - **RuleType** *(string) --* 

              When you want to forward DNS queries for specified domain name to resolvers on your network, specify ``FORWARD`` .

               

              When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify ``SYSTEM`` .

               

              For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify ``FORWARD`` for ``RuleType`` . To then have Resolver process queries for apex.example.com, you create a rule and specify ``SYSTEM`` for ``RuleType`` .

               

              Currently, only Resolver can create rules that have a value of ``RECURSIVE`` for ``RuleType`` .

              
            

            - **Name** *(string) --* 

              The name for the Resolver rule, which you specified when you created the Resolver rule.

              
            

            - **TargetIps** *(list) --* 

              An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.

              
              

              - *(dict) --* 

                In a `CreateResolverRule <https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html>`__ request, an array of the IPs that you want to forward DNS queries to.

                
                

                - **Ip** *(string) --* 

                  One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.

                  
                

                - **Port** *(integer) --* 

                  The port at ``Ip`` that you want to forward DNS queries to.

                  
            
          
            

            - **ResolverEndpointId** *(string) --* 

              The ID of the endpoint that the rule is associated with.

              
            

            - **OwnerId** *(string) --* 

              When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.

              
            

            - **ShareStatus** *(string) --* 

              Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.

              
            

            - **CreationTime** *(string) --* 

              The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).

              
            

            - **ModificationTime** *(string) --* 

              The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).

              
        
      
    

.. py:class:: Route53Resolver.Paginator.ListTagsForResource

  ::

    
    paginator = client.get_paginator('list_tags_for_resource')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Route53Resolver.Client.list_tags_for_resource`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ResourceArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the resource that you want to list tags for.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          The tags that are associated with the resource that you specified in the ``ListTagsForResource`` request.

          
          

          - *(dict) --* 

            One tag that you want to add to the specified resource. A tag consists of a ``Key`` (a name for the tag) and a ``Value`` .

            
            

            - **Key** *(string) --* 

              The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of ``Key`` might be ``account-id`` .

              
            

            - **Value** *(string) --* 

              The value for the tag. For example, if ``Key`` is ``account-id`` , then ``Value`` might be the ID of the customer account that you're creating the resource for.

              
        
      
    